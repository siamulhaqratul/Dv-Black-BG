[1,["58cf3db3-e6f4-4943-a076-26157912429c","1baf0fc9-befa-459c-8bdd-af1a450a0319","20835ba4-6145-4fbc-a58a-051ce700aa3e@f9941","d3c7820c-2a98-4429-8bc7-b8453bc9ac41","90f86573-5baf-41e2-97db-8604d1f42b65@a9630","445d5d9d-c56b-4528-bc90-c847357e5d94@ab65f","cd618de5-59fc-4899-ba4f-55195f3e24ce@6c48a","20835ba4-6145-4fbc-a58a-051ce700aa3e@6c48a","544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@6c48a","3af9be2f-93d2-41a0-b7b7-3cc03054b34a@6c48a","026c4a15-e07d-4053-86de-9f9fe30188e5@6c48a","5f4dd798-2ae6-4bbf-84b4-504bb6cceaed@6c48a","6cd4e8c1-b63f-4bbb-b3db-b323fa08b435","1263d74c-8167-4928-91a6-4e2672411f47@801ec","f9cd731b-eb01-4aa7-9da2-483235277649","8868942f-9687-4d66-a73a-14e2a99047ff","eb7138f8-eb1f-433e-ae2c-77ff499c8e14","7d8f9b89-4fd1-4c9f-a3ab-38ec7cded7ca@f9941","544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@f9941","951249e0-9f16-456d-8b85-a6ca954da16b@f9941","7e81a899-6c7c-493d-80cf-e4f730e4f48f","fb9825a0-fd7f-48c5-b121-9af90f9f2011@72704","5bee9f0c-9771-4e73-b0ea-0bbb6da67698@a865e","a873a742-b503-4a96-8570-6fe542697035@57e42","caf172df-03b7-4c5a-8a53-93f3e4be5146@5ecd9","27ac412c-9efa-4ead-8e2c-fe6533c7878f@96245","501da3c5-f2d8-45f7-bc04-5130d58811ff@cd579","50735e20-7211-4e9c-b676-4d648cdc0cbb@b6423","1cf73293-3e10-49c1-bfa1-59daaadbd18b@b452c","58c9fdbf-de49-4141-83fa-9ad83f78591c@b940a","b1cb32e6-c8c9-40c9-9d52-119dae416b32@0a7b5","7d8f9b89-4fd1-4c9f-a3ab-38ec7cded7ca@6c48a","19819162-ce3f-4f7c-8889-8b2f35bf274c@6c48a","8949c1f1-9b2b-418c-b150-611a94543416@6c48a","951249e0-9f16-456d-8b85-a6ca954da16b@6c48a","1263d74c-8167-4928-91a6-4e2672411f47@a804a"],["node","_parent","_textureSource","_mesh","_effectAsset","root","normalMap","mainTexture","_spriteFrame","data","_skeleton","emissiveMap","_cameraComponent","_target","target","source","stepsLabel","scene","asset","cubePrfb","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite","_defaultClip","pbrMap","metallicRoughnessMap"],[["cc.Node",["_name","_layer","_id","_active","_components","_lpos","_parent","_prefab","_children","_lrot","_euler"],-1,9,5,1,4,2,5,5],"cc.SpriteFrame",["cc.Label",["_string","_actualFontSize","_fontSize","_horizontalAlign","_verticalAlign","_srcBlendFactor","_overflow","_enableWrapText","_lineHeight","node","_color"],-6,1,5],["cc.Material",["_defines","_states","_techIdx","_props"],0,12],["cc.CompactValueTypeArray",["_unitCount","_unitElement","_length","_byteOffset"],-1],["cc.Node",["_name","_id","_layer","_parent","_components","_children","_lpos"],0,1,2,2,5],["cc.Node",["_name","_layer","_lpos","_parent","_components","_children","_prefab","_lrot","_euler"],1,5,1,12,12,4,5,5],["cc.UITransform",["node","_contentSize"],3,1,5],["cc.PrefabInfo",["fileId","root","instance","asset","targetOverrides"],2,1,4,6,9],["cc.Sprite",["_sizeMode","_type","node","_spriteFrame"],1,1,6],["cc.TargetOverrideInfo",["propertyPath","source","target","targetInfo","sourceInfo"],2,1,1,4,4],["cc.MeshRenderer",["_name","_enabled","_shadowCastingMode","node","_materials","lightmapSettings","_mesh","__prefab"],0,1,3,4,6,4],["cc.Camera",["_visibility","_name","_projection","_priority","_orthoHeight","_far","_clearFlags","node","_color"],-4,1,5],["cc.SkinnedMeshRenderer",["_name","_shadowCastingMode","node","__prefab","_materials","lightmapSettings","_skinningRoot","_mesh","_skeleton"],1,1,4,3,4,1,6,6],["cc.Mesh",["_native","_dataLength","_hash","_struct"],0,11],["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.AnimationClip",["_name","_native","sample","wrapMode","enableTrsBlending","_duration","_hash","_keys","_curves"],-4,9,12],["cc.AnimationClip",["_name","sample","_duration","_hash","_keys","_curves"],-2,12],["cc.animation.HierarchyPath",["path"],2],["cc.SceneAsset",["_name"],2],["cc.Node",["_name","_parent","_children","_prefab","_lpos","_lrot","_euler"],2,1,9,4,5,5,5],["cc.PrefabInfo",["fileId","root","asset"],2,1,1],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,4],["cc.TargetInfo",["localID"],2],["cc.ModelLightmapSettings",[],3],["cc.Canvas",["node","_cameraComponent"],3,1,1],["cc.Widget",["_alignFlags","node"],2,1],["cc.Button",["_transition","node","clickEvents","_normalColor","_target","_normalSprite","_hoverSprite","_pressedSprite","_disabledSprite"],2,1,9,5,1,6,6,6,6],["cc.ClickEvent",["_componentId","handler","target"],1,1],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog"],3,4,4,4,4],["cc.AmbientInfo",[],3],["cc.ShadowsInfo",["_enabled","_distance","_normal","_shadowColor"],1,5,5],["cc.SkyboxInfo",[],3],["cc.FogInfo",[],3],["cc.Animation",["_name","node","_clips"],2,1,3],["ddfb1tkyx9BEqyM7xmfE5Db",["_name","node"],2,1],["326d6DtDjZPxJ4SwTMVuYAe",["node","startMenu","playerCtrl","stepsLabel","cubePrfb"],3,1,1,1,1,6],["cc.DirectionalLight",["_name","node","_staticSettings"],2,1,4],["cc.StaticLightSettings",[],3],["cc.SpotLight",["_name","_size","_luminance","_range","_spotAngle","node","_staticSettings"],-2,1,4],["cc.Prefab",["_name"],2],["cc.SkeletalAnimation",["_name","playOnLoad","node","__prefab","_clips","_defaultClip"],1,1,4,3,6],["cc.CompPrefabInfo",["fileId"],2],["cc.Skeleton",["_name","_hash","_joints","_bindposes"],0,12]],[[4,3,0,1,2,5],[18,0,2],[21,0,1,2,2],[0,0,6,8,7,5,9,10,2],[0,0,6,7,5,9,10,2],[20,0,1,2,3,4,5,6,2],[16,0,1,2,3,4,5,6,7,8,8],[4,0,1,2,4],[7,0,1,1],[24,0,2],[25,1],[14,0,1,2,3,4],[44,0,2],[0,0,1,6,4,5,3],[0,0,8,7,5,9,10,2],[17,0,1,2,3,4,5,6],[0,0,1,6,4,3],[23,0,1,2,2],[10,0,1,4,2,3,2],[2,0,3,1,2,9,10,5],[40,1],[42,0,2],[15,0,1,2,4],[3,1,0,3,3],[3,2,1,0,3,4],[3,0,2],[19,0,2],[0,0,1,8,4,3],[0,7,1],[0,0,1,2,8,4,5,4],[0,0,1,6,8,4,5,3],[0,0,8,4,2],[0,0,2,6,4,3],[0,0,2,6,4,5,9,10,3],[0,0,6,4,5,9,10,2],[0,0,6,4,5,2],[0,0,8,4,7,5,9,10,2],[0,0,3,6,4,7,5,3],[0,0,6,4,7,2],[0,0,6,8,7,9,10,2],[0,0,4,7,5,2],[5,0,1,3,5,4,3],[5,0,2,3,4,6,3],[6,0,1,3,4,2,3],[6,0,5,6,2,7,8,2],[7,0,1],[8,0,1,2,3,2],[8,4,1],[22,0,1,2,3],[26,0,1,1],[27,0,1,2],[9,1,0,2,3,3],[9,0,2,3,2],[28,0,1,2,3,4,5,6,7,8,2],[29,0,1,2,3],[30,0,1,2,3,2],[10,0,1,2,3,2],[31,0,1,2,3,1],[32,1],[33,0,1,2,3,3],[34,1],[35,1],[11,0,1,2,3,4,5,6,4],[11,0,3,7,4,5,6,2],[36,0,1,2,2],[37,0,1,2],[38,0,1,2,3,4,1],[2,5,0,1,2,6,7,9,10,7],[2,0,3,4,1,9,10,5],[2,0,3,4,1,2,8,9,7],[39,0,1,2,2],[41,0,1,2,3,4,5,6,6],[12,1,0,7,8,3],[12,2,3,4,5,6,0,7,8,7],[43,0,1,2,3,4,5,3],[13,2,3,4,5,6,7,8,1],[13,0,1,2,3,4,5,6,7,8,3],[45,0,1,2,3,4]],[[[[11,".bin",86264,1984533023,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":73976,"length":12288,"count":6144,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":73976,"count":1321,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-1,-0.5],"maxPosition",8,[1,0.5,1,0.5]]]],0,0,[],[],[]],[[[11,".bin",1416,4094896171,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":72,"count":36,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]]],0,0,[],[],[]],[[[22,"builtin-standard",[{"hash":442396670,"name":"builtin-standard|standard-vs|standard-fs","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nlayout(location = 0) out float v_fog_factor;\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 13) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(location = 0) in float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n  float CCGetLinearDepth (vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    float dist = length(viewStartPos.xyz);\n    return cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z - cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block1 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block2 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n    } else {\n      block0 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n      block1 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x, offsetDepth);\n      block2 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x, offsetDepth);\n      block3 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x, offsetDepth);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float bias = cc_shadowWHPBInfo.w;\n    float offsetDepth = clipPos.z - bias;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block1 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block2 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block4 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block5 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block6 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block7 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block8 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n    } else {\n      block0 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x, offsetDepth);\n      block1 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x, offsetDepth);\n      block2 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x, offsetDepth);\n      block3 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x, offsetDepth);\n      block4 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n      block5 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x, offsetDepth);\n      block6 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x, offsetDepth);\n      block7 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x, offsetDepth);\n      block8 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x, offsetDepth);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = 0.0;\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowWHPBInfo.x;\n    float offsety = 1.0 / cc_shadowWHPBInfo.y;\n    float shadow = 0.0;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      float closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    } else {\n      float closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    }\n    return shadow / 5.0;\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowWHPBInfo.x;\n    float offsety = 1.0 / cc_shadowWHPBInfo.y;\n    float shadow = 0.0;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n          float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n        }\n      }\n    } else {\n      for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n          float closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\n          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n        }\n      }\n    }\n    return shadow / 9.0;\n  }\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.001);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.001);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowWHPBInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      float cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\n      vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n      vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\n      if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorSoft2X(pos);\n      else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorSoft(pos);\n      else shadowAttenuation = CCGetShadowFactorHard(pos);\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + dirlightContrib.rgb * (1.0 - cc_shadowColor.a);\n      if (cc_shadowNFLSInfo.w > 0.000001) {\n        dirlightContrib.rgb = shadowColor.rgb * shadowAttenuation + dirlightContrib.rgb * (1.0 - shadowAttenuation);\n      } else {\n        dirlightContrib.rgb = shadowColor.rgb * shadowAttenuation * NL + dirlightContrib.rgb * (1.0 - shadowAttenuation * NL);\n      }\n    }\n  #endif\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 9) uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\n  layout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 7) in vec3 v_tangent;\n  layout(location = 8) in vec3 v_bitangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z + 0.001;\n            float shadowAttenuation = 0.0;\n            float cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\n            vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n            vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\n            if (pcf > 2.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft2X(pos, s.position);\n            else if (pcf > 1.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft(pos, s.position);\n            else shadowAttenuation = CCGetSpotLightShadowFactorHard(pos, s.position);\n            lightColor *= 1.0 - shadowAttenuation;\n          }\n        }\n      #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 0\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nout float v_fog_factor;\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nin float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetLinearDepth (vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    float dist = length(viewStartPos.xyz);\n    return cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z - cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block1 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block2 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n    } else {\n      block0 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n      block1 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x, offsetDepth);\n      block2 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x, offsetDepth);\n      block3 = step(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x, offsetDepth);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float bias = cc_shadowWHPBInfo.w;\n    float offsetDepth = clipPos.z - bias;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block1 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block2 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block3 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block4 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block5 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block6 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block7 = step(dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block8 = step(dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n    } else {\n      block0 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x, offsetDepth);\n      block1 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x, offsetDepth);\n      block2 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x, offsetDepth);\n      block3 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x, offsetDepth);\n      block4 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n      block5 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x, offsetDepth);\n      block6 = step(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x, offsetDepth);\n      block7 = step(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x, offsetDepth);\n      block8 = step(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x, offsetDepth);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = 0.0;\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowWHPBInfo.x;\n    float offsety = 1.0 / cc_shadowWHPBInfo.y;\n    float shadow = 0.0;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      float closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    } else {\n      float closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    }\n    return shadow / 5.0;\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowWHPBInfo.x;\n    float offsety = 1.0 / cc_shadowWHPBInfo.y;\n    float shadow = 0.0;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n          float closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n        }\n      }\n    } else {\n      for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n          float closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\n          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n        }\n      }\n    }\n    return shadow / 9.0;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.001);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.001);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowWHPBInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      float cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\n      vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n      vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\n      if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorSoft2X(pos);\n      else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorSoft(pos);\n      else shadowAttenuation = CCGetShadowFactorHard(pos);\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + dirlightContrib.rgb * (1.0 - cc_shadowColor.a);\n      if (cc_shadowNFLSInfo.w > 0.000001) {\n        dirlightContrib.rgb = shadowColor.rgb * shadowAttenuation + dirlightContrib.rgb * (1.0 - shadowAttenuation);\n      } else {\n        dirlightContrib.rgb = shadowColor.rgb * shadowAttenuation * NL + dirlightContrib.rgb * (1.0 - shadowAttenuation * NL);\n      }\n    }\n  #endif\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\n  in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in vec3 v_tangent;\n  in vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z + 0.001;\n            float shadowAttenuation = 0.0;\n            float cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\n            vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n            vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\n            if (pcf > 2.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft2X(pos, s.position);\n            else if (pcf > 1.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft(pos, s.position);\n            else shadowAttenuation = CCGetSpotLightShadowFactorHard(pos, s.position);\n            lightColor *= 1.0 - shadowAttenuation;\n          }\n        }\n      #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 0\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  layout(location = 3) out vec4 fragColor3;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(s.position, s.roughness);\n    fragColor2 = vec4(s.normal, s.metallic);\n    fragColor3 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n#endif\n      uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\n    v_luv.z = cc_lightingMapUVParam.z;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\n    v_luv.z = a_lightingMapUVParam.z;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n    #if CC_USE_FOG == 0\n      v_fog_factor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      v_fog_factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      v_fog_factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      v_fog_factor = LayeredFog(pos);\n    #else\n      v_fog_factor = 1.0;\n    #endif\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_exposure;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nvarying float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowWHPBInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\n  uniform lowp vec4 cc_shadowColor;\n#if CC_RECEIVE_SHADOW\n  uniform sampler2D cc_shadowMap;\n  uniform sampler2D cc_spotLightingMap;\n  float CCGetLinearDepth (vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    float dist = length(viewStartPos.xyz);\n    return cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z - cc_shadowWHPBInfo.w;\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block1 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block2 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block3 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n    } else {\n      block0 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n      block1 = step(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x, offsetDepth);\n      block2 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x, offsetDepth);\n      block3 = step(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x, offsetDepth);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float bias = cc_shadowWHPBInfo.w;\n    float offsetDepth = clipPos.z - bias;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      block0 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block1 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block2 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block3 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block4 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block5 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block6 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block7 = step(dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n      block8 = step(dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0)), offsetDepth);\n    } else {\n      block0 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x, offsetDepth);\n      block1 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x, offsetDepth);\n      block2 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x, offsetDepth);\n      block3 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x, offsetDepth);\n      block4 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x, offsetDepth);\n      block5 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x, offsetDepth);\n      block6 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x, offsetDepth);\n      block7 = step(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x, offsetDepth);\n      block8 = step(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x, offsetDepth);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = 0.0;\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowWHPBInfo.x;\n    float offsety = 1.0 / cc_shadowWHPBInfo.y;\n    float shadow = 0.0;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      float closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    } else {\n      float closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n      closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\n      shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n    }\n    return shadow / 5.0;\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos) {\n    vec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\n    float offsetx = 1.0 / cc_shadowWHPBInfo.x;\n    float offsety = 1.0 / cc_shadowWHPBInfo.y;\n    float shadow = 0.0;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    if (cc_shadowLPNNInfo.y > 0.000001) {\n      for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n          float closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n        }\n      }\n    } else {\n      for (int i = -1; i <= 1; i++) {\n        for (int j = -1; j <= 1; j++) {\n          float closestDepth = texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\n          shadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n        }\n      }\n    }\n    return shadow / 9.0;\n  }\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n  }\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\nstruct StandardSurface {\n  vec4 albedo;\n  vec3 position;\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - s.position);\n  float NV = max(abs(dot(N, V)), 0.001);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.001);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse;\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > 0.0001) {\n      finalColor = s.lightmap.rgb;\n    }\n  #else\n    diffuseContrib /= 3.14159265359;\n  #endif\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  #if CC_RECEIVE_SHADOW\n    {\n      float pcf = cc_shadowWHPBInfo.z + 0.001;\n      float shadowAttenuation = 0.0;\n      float cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\n      vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n      vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\n      if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorSoft2X(pos);\n      else if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorSoft(pos);\n      else shadowAttenuation = CCGetShadowFactorHard(pos);\n      vec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + dirlightContrib.rgb * (1.0 - cc_shadowColor.a);\n      if (cc_shadowNFLSInfo.w > 0.000001) {\n        dirlightContrib.rgb = shadowColor.rgb * shadowAttenuation + dirlightContrib.rgb * (1.0 - shadowAttenuation);\n      } else {\n        dirlightContrib.rgb = shadowColor.rgb * shadowAttenuation * NL + dirlightContrib.rgb * (1.0 - shadowAttenuation * NL);\n      }\n    }\n  #endif\n  finalColor *= dirlightContrib;\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\n  finalColor += (ambDiff.rgb * diffuse);\n  #if CC_USE_IBL\n    vec3 R = normalize(reflect(-V, N));\n    vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n    #if CC_USE_IBL == 2\n      vec3 env = unpackRGBE(envmap);\n    #else\n      vec3 env = SRGBToLinear(envmap.rgb);\n    #endif\n    finalColor += env * cc_ambientSky.w * specular;\n  #endif\n  finalColor = finalColor * s.occlusion;\n  #if CC_USE_HDR\n    s.emissive *= cc_exposure.w;\n  #endif\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if !CC_USE_HDR\n    color.rgb = sqrt(ACESToneMap(color.rgb));\n  #endif\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n  vec3 UnpackLightingmap(vec4 color) {\n    vec3 c;\n    float e = 1.0 + color.a * (8.0 - 1.0);\n    c.r = color.r * e;\n    c.g = color.g * e;\n    c.b = color.b * e;\n    return c;\n  }\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\n  varying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor *= v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = UnpackLightingmap(lightColor);\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    s.normal =\n      (nmmp.x * pbrParams.w) * normalize(v_tangent) +\n      (nmmp.y * pbrParams.w) * normalize(v_bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  s.position = v_position;\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = clamp(pbr.x, 0.0, 0.96);\n  s.roughness = clamp(pbr.y, 0.04, 1.0);\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n  # define LIGHTS_PER_PASS 1\n  #else\n  # define LIGHTS_PER_PASS 10\n  #endif\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / 3.14159265359;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - s.position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - s.position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0) {\n          {\n            float pcf = cc_shadowWHPBInfo.z + 0.001;\n            float shadowAttenuation = 0.0;\n            float cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\n            vec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\n            vec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\n            if (pcf > 2.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft2X(pos, s.position);\n            else if (pcf > 1.0) shadowAttenuation = CCGetSpotLightShadowFactorSoft(pos, s.position);\n            else shadowAttenuation = CCGetSpotLightShadowFactorHard(pos, s.position);\n            lightColor *= 1.0 - shadowAttenuation;\n          }\n        }\n      #endif\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    finalColor = finalColor * s.occlusion;\n    return vec4(finalColor, 0.0);\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 0\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    color = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(s.position, s.roughness);\n    gl_FragData[2] = vec4(s.normal, s.metallic);\n    gl_FragData[3] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]}]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":216,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":59}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_color","type":16,"count":1,"stageFlags":1,"format":44,"location":13,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":1,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":1,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":1,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":1,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":1,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":1,"location":9,"defines":["USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}]},{"hash":826679743,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      layout(location = 7) in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  layout(location = 8) in vec4 a_matWorld0;\n  layout(location = 9) in vec4 a_matWorld1;\n  layout(location = 10) in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    layout(location = 11) in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n  layout(set = 2, binding = 0) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  layout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      vec4 viewStartPos = cc_matLightView * v_worldPos;\n      float dist = length(viewStartPos.xyz);\n      float linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n      return vec4(linearDepth, 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      in highp vec4 a_jointAnimInfo;\n    #endif\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n  layout(std140) uniform CCLocalBatched {\n    highp mat4 cc_matWorlds[10];\n  };\n#else\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n  };\n#endif\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  lowp  vec4 cc_shadowNFLSInfo;\n  lowp  vec4 cc_shadowWHPBInfo;\n  lowp  vec4 cc_shadowLPNNInfo;\n  lowp  vec4 cc_shadowColor;\n};\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      vec4 viewStartPos = cc_matLightView * v_worldPos;\n      float dist = length(viewStartPos.xyz);\n      float linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n      return vec4(linearDepth, 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout StandardVertInput attr) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    attr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    attr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    attr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n  #if CC_USE_BAKED_ANIMATION\n    #if USE_INSTANCING\n      attribute highp vec4 a_jointAnimInfo;\n    #endif\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n      #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n              #if USE_INSTANCING\n                highp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n              #else\n                highp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n              #endif\n              highp float invSize = cc_jointTextureInfo.w;\n              highp float y = floor(j * invSize);\n              highp float x = floor(j - y * cc_jointTextureInfo.x);\n              y = (y + 0.5) * invSize;\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout StandardVertInput attr) {\n    mat4 m = skinMatrix();\n    attr.position = m * attr.position;\n    attr.normal = (m * vec4(attr.normal, 0.0)).xyz;\n    attr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n  }\n#endif\n#if USE_INSTANCING\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n  uniform highp mat4 cc_matWorlds[10];\n#else\n  uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n#endif\n      uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n      In.position = vec4(a_position, 1.0);\n      In.normal = a_normal;\n      In.tangent = a_tangent;\n    #if CC_USE_MORPH\n      applyMorph(In);\n    #endif\n    #if CC_USE_SKINNING\n      CCSkin(In);\n    #endif\n  mat4 matWorld, matWorldIT;\n    #if USE_INSTANCING\n      matWorld = mat4(\n        vec4(a_matWorld0.xyz, 0.0),\n        vec4(a_matWorld1.xyz, 0.0),\n        vec4(a_matWorld2.xyz, 0.0),\n        vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n      );\n      matWorldIT = matWorld;\n    #elif USE_BATCHING\n      matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n      matWorldIT = matWorld;\n    #else\n      matWorld = cc_matWorld;\n      matWorldIT = cc_matWorldIT;\n    #endif\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\n  ret = fract(ret);\n  ret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\n  return ret;\n}\nuniform highp mat4 cc_matLightView;\n  uniform lowp vec4 cc_shadowNFLSInfo;\n  uniform lowp vec4 cc_shadowLPNNInfo;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      vec4 viewStartPos = cc_matLightView * v_worldPos;\n      float dist = length(viewStartPos.xyz);\n      float linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n      return vec4(linearDepth, 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]}],"samplerTextures":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":179,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":22}},"defines":[{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["CC_USE_SKINNING"]},{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}],"blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"attributes":[{"name":"a_position","type":15,"count":1,"stageFlags":1,"format":32,"location":0,"defines":[]},{"name":"a_normal","type":15,"count":1,"stageFlags":1,"format":32,"location":1,"defines":[]},{"name":"a_texCoord","type":14,"count":1,"stageFlags":1,"format":21,"location":2,"defines":[]},{"name":"a_tangent","type":16,"count":1,"stageFlags":1,"format":44,"location":3,"defines":[]},{"name":"a_vertexId","type":13,"count":1,"stageFlags":1,"format":11,"location":6,"defines":["CC_USE_MORPH"]},{"name":"a_joints","type":"u32vec4","count":1,"stageFlags":1,"location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","type":16,"count":1,"stageFlags":1,"format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":7,"defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION","USE_INSTANCING"]},{"name":"a_matWorld0","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","type":16,"count":1,"stageFlags":1,"format":44,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","USE_LIGHTMAP"]},{"name":"a_dyn_batch_id","type":13,"count":1,"stageFlags":1,"format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_texCoord1","type":14,"count":1,"stageFlags":1,"format":21,"location":13,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":1,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":1,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":1,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":1,"location":3,"defines":[]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}},"migrations":{"properties":{"pbrParams":{"removeImmediately":true}}}},{"phase":"deferred","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","blendState":{"targets":[{"blend":false},{"blend":false},{"blend":false},{"blend":false}]},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"handleInfo":["pbrParams",2,13]},"normalStrenth":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP"},"handleInfo":["pbrParams",3,13]},"emissive":{"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,1]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[6,"cocos_anim_shoot",".bin",30,2,true,1.3000000715255737,1316877094,[[0,83200,40,6,40],[0,83360,40,6,40],[0,83520,40,6,40],[0,83680,40,6,40],[0,83840,40,6,40],[0,84000,40,6,40],[0,84160,40,6,40],[0,84320,40,6,40],[0,84480,40,6,40],[0,84640,40,6,40],[0,84800,40,6,40],[0,84960,40,6,40],[0,85120,40,6,40],[0,85280,40,6,40],[0,85440,40,6,40],[0,85600,40,6,40],[0,85760,40,6,40],[0,85920,40,6,40],[0,86080,40,6,40],[0,86240,40,6,40],[0,86400,40,6,40],[0,86560,40,6,40],[0,86720,40,6,40],[0,86880,40,6,40],[0,87040,40,6,40],[0,87200,40,6,40],[0,87360,40,6,40],[0,87520,40,6,40],[0,87680,40,6,40],[0,87840,40,6,40],[0,88000,40,6,40],[0,88160,40,6,40],[0,88320,40,6,40],[0,88480,40,6,40],[0,88640,40,6,40],[0,88800,40,6,40],[0,88960,40,6,40],[0,89120,40,6,40],[0,89280,40,6,40],[0,89440,40,6,40],[0,89600,40,6,40],[0,89760,40,6,40],[0,89920,40,6,40],[0,90080,40,6,40],[0,90240,40,6,40],[0,90400,40,6,40],[0,90560,40,6,40],[0,90720,40,6,40],[0,90880,40,6,40],[0,91040,40,6,40],[0,91200,40,6,40],[0,91360,40,6,40]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,120,22,40]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,480,160,38,40]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,1120,120,22,40]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,1600,120,22,40]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,2080,160,38,40]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,2720,120,22,40]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,3200,120,22,40]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,3680,160,38,40]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,4320,120,22,40]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,4800,120,22,40]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,5280,160,38,40]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,5920,120,22,40]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,6400,120,22,40]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,6880,160,38,40]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,7520,120,22,40]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,8000,120,22,40]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,8480,160,38,40]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,9120,120,22,40]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,9600,120,22,40]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,10080,160,38,40]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,10720,120,22,40]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,11200,120,22,40]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,11680,160,38,40]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,12320,120,22,40]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,12800,120,22,40]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,13280,160,38,40]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,13920,120,22,40]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,14400,120,22,40]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,14880,160,38,40]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,15520,120,22,40]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,16000,120,22,40]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,16480,160,38,40]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,17120,120,22,40]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,17600,120,22,40]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,18080,160,38,40]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,18720,120,22,40]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,19200,120,22,40]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,19680,160,38,40]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,20320,120,22,40]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,20800,120,22,40]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,21280,160,38,40]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,21920,120,22,40]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,22400,120,22,40]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,22880,160,38,40]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,23520,120,22,40]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,24000,120,22,40]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,24480,160,38,40]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,25120,120,22,40]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,25600,120,22,40]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,26080,160,38,40]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,26720,120,22,40]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,27200,120,22,40]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,27680,160,38,40]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,28320,120,22,40]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,28800,120,22,40]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,29280,160,38,40]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,29920,120,22,40]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,30400,120,22,40]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,30880,160,38,40]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,31520,120,22,40]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,32000,120,22,40]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,32480,160,38,40]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,33120,120,22,40]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,33600,120,22,40]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,34080,160,38,40]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,34720,120,22,40]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,35200,120,22,40]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,35680,160,38,40]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,36320,120,22,40]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,36800,120,22,40]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,37280,160,38,40]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,37920,120,22,40]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,38400,120,22,40]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,38880,160,38,40]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,39520,120,22,40]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,40000,120,22,40]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,40480,160,38,40]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,41120,120,22,40]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,41600,120,22,40]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,42080,160,38,40]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,42720,120,22,40]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,43200,120,22,40]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,43680,160,38,40]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,44320,120,22,40]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,44800,120,22,40]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,45280,160,38,40]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,45920,120,22,40]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,46400,120,22,40]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,46880,160,38,40]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,47520,120,22,40]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,48000,120,22,40]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,48480,160,38,40]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,49120,120,22,40]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,49600,120,22,40]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,50080,160,38,40]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,50720,120,22,40]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,51200,120,22,40]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,51680,160,38,40]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,52320,120,22,40]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,52800,120,22,40]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,53280,160,38,40]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,53920,120,22,40]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,54400,120,22,40]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,54880,160,38,40]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,55520,120,22,40]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,56000,120,22,40]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,56480,160,38,40]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,57120,120,22,40]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,57600,120,22,40]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,58080,160,38,40]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,58720,120,22,40]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,59200,120,22,40]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,59680,160,38,40]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,60320,120,22,40]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,60800,120,22,40]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,61280,160,38,40]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,61920,120,22,40]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,62400,120,22,40]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,62880,160,38,40]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,63520,120,22,40]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,64000,120,22,40]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,64480,160,38,40]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,65120,120,22,40]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,65600,120,22,40]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,66080,160,38,40]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,66720,120,22,40]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,67200,120,22,40]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,67680,160,38,40]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,68320,120,22,40]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,68800,120,22,40]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,69280,160,38,40]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,69920,120,22,40]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,70400,120,22,40]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,70880,160,38,40]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,71520,120,22,40]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,72000,120,22,40]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,72480,160,38,40]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,73120,120,22,40]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,73600,120,22,40]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,74080,160,38,40]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,74720,120,22,40]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,75200,120,22,40]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,75680,160,38,40]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,76320,120,22,40]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,76800,120,22,40]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,77280,160,38,40]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,77920,120,22,40]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,78400,120,22,40]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,78880,160,38,40]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,79520,120,22,40]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,80000,120,22,40]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,80480,160,38,40]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,81120,120,22,40]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,81600,120,22,40]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,82080,160,38,40]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,82720,120,22,40]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"20835ba4-6145-4fbc-a58a-051ce700aa3e@6c48a","packable":true}],[1],0,[0],[2],[7]],[[[6,"cocos_anim_down",".bin",30,2,true,2.633333444595337,4169485404,[[0,166400,80,6,80],[0,166720,80,6,80],[0,167040,80,6,80],[0,167360,80,6,80],[0,167680,80,6,80],[0,168000,80,6,80],[0,168320,80,6,80],[0,168640,80,6,80],[0,168960,80,6,80],[0,169280,80,6,80],[0,169600,80,6,80],[0,169920,80,6,80],[0,170240,80,6,80],[0,170560,80,6,80],[0,170880,80,6,80],[0,171200,80,6,80],[0,171520,80,6,80],[0,171840,80,6,80],[0,172160,80,6,80],[0,172480,80,6,80],[0,172800,80,6,80],[0,173120,80,6,80],[0,173440,80,6,80],[0,173760,80,6,80],[0,174080,80,6,80],[0,174400,80,6,80],[0,174720,80,6,80],[0,175040,80,6,80],[0,175360,80,6,80],[0,175680,80,6,80],[0,176000,80,6,80],[0,176320,80,6,80],[0,176640,80,6,80],[0,176960,80,6,80],[0,177280,80,6,80],[0,177600,80,6,80],[0,177920,80,6,80],[0,178240,80,6,80],[0,178560,80,6,80],[0,178880,80,6,80],[0,179200,80,6,80],[0,179520,80,6,80],[0,179840,80,6,80],[0,180160,80,6,80],[0,180480,80,6,80],[0,180800,80,6,80],[0,181120,80,6,80],[0,181440,80,6,80],[0,181760,80,6,80],[0,182080,80,6,80],[0,182400,80,6,80],[0,182720,80,6,80]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,240,22,80]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,960,320,38,80]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,2240,240,22,80]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,3200,240,22,80]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,4160,320,38,80]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,5440,240,22,80]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,6400,240,22,80]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,7360,320,38,80]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,8640,240,22,80]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,9600,240,22,80]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,10560,320,38,80]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,11840,240,22,80]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,12800,240,22,80]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,13760,320,38,80]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,15040,240,22,80]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,16000,240,22,80]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,16960,320,38,80]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,18240,240,22,80]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,19200,240,22,80]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,20160,320,38,80]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,21440,240,22,80]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,22400,240,22,80]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,23360,320,38,80]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,24640,240,22,80]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,25600,240,22,80]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,26560,320,38,80]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,27840,240,22,80]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,28800,240,22,80]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,29760,320,38,80]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,31040,240,22,80]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,32000,240,22,80]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,32960,320,38,80]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,34240,240,22,80]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,35200,240,22,80]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,36160,320,38,80]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,37440,240,22,80]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,38400,240,22,80]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,39360,320,38,80]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,40640,240,22,80]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,41600,240,22,80]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,42560,320,38,80]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,43840,240,22,80]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,44800,240,22,80]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,45760,320,38,80]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,47040,240,22,80]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,48000,240,22,80]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,48960,320,38,80]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,50240,240,22,80]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,51200,240,22,80]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,52160,320,38,80]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,53440,240,22,80]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,54400,240,22,80]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,55360,320,38,80]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,56640,240,22,80]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,57600,240,22,80]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,58560,320,38,80]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,59840,240,22,80]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,60800,240,22,80]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,61760,320,38,80]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,63040,240,22,80]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,64000,240,22,80]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,64960,320,38,80]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,66240,240,22,80]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,67200,240,22,80]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,68160,320,38,80]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,69440,240,22,80]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,70400,240,22,80]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,71360,320,38,80]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,72640,240,22,80]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,73600,240,22,80]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,74560,320,38,80]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,75840,240,22,80]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,76800,240,22,80]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,77760,320,38,80]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,79040,240,22,80]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,80000,240,22,80]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,80960,320,38,80]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,82240,240,22,80]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,83200,240,22,80]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,84160,320,38,80]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,85440,240,22,80]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,86400,240,22,80]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,87360,320,38,80]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,88640,240,22,80]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,89600,240,22,80]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,90560,320,38,80]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,91840,240,22,80]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,92800,240,22,80]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,93760,320,38,80]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,95040,240,22,80]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,96000,240,22,80]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,96960,320,38,80]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,98240,240,22,80]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,99200,240,22,80]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,100160,320,38,80]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,101440,240,22,80]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,102400,240,22,80]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,103360,320,38,80]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,104640,240,22,80]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,105600,240,22,80]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,106560,320,38,80]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,107840,240,22,80]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,108800,240,22,80]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,109760,320,38,80]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,111040,240,22,80]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,112000,240,22,80]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,112960,320,38,80]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,114240,240,22,80]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,115200,240,22,80]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,116160,320,38,80]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,117440,240,22,80]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,118400,240,22,80]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,119360,320,38,80]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,120640,240,22,80]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,121600,240,22,80]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,122560,320,38,80]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,123840,240,22,80]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,124800,240,22,80]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,125760,320,38,80]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,127040,240,22,80]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,128000,240,22,80]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,128960,320,38,80]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,130240,240,22,80]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,131200,240,22,80]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,132160,320,38,80]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,133440,240,22,80]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,134400,240,22,80]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,135360,320,38,80]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,136640,240,22,80]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,137600,240,22,80]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,138560,320,38,80]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,139840,240,22,80]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,140800,240,22,80]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,141760,320,38,80]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,143040,240,22,80]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,144000,240,22,80]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,144960,320,38,80]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,146240,240,22,80]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,147200,240,22,80]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,148160,320,38,80]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,149440,240,22,80]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,150400,240,22,80]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,151360,320,38,80]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,152640,240,22,80]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,153600,240,22,80]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,154560,320,38,80]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,155840,240,22,80]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,156800,240,22,80]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,157760,320,38,80]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,159040,240,22,80]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,160000,240,22,80]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,160960,320,38,80]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,162240,240,22,80]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,163200,240,22,80]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,164160,320,38,80]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,165440,240,22,80]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[[6,"cocos_anim_idle",".bin",30,2,true,3.000000238418579,406926302,[[0,189280,91,6,91],[0,189644,91,6,91],[0,190008,91,6,91],[0,190372,91,6,91],[0,190736,91,6,91],[0,191100,91,6,91],[0,191464,91,6,91],[0,191828,91,6,91],[0,192192,91,6,91],[0,192556,91,6,91],[0,192920,91,6,91],[0,193284,91,6,91],[0,193648,91,6,91],[0,194012,91,6,91],[0,194376,91,6,91],[0,194740,91,6,91],[0,195104,91,6,91],[0,195468,91,6,91],[0,195832,91,6,91],[0,196196,91,6,91],[0,196560,91,6,91],[0,196924,91,6,91],[0,197288,91,6,91],[0,197652,91,6,91],[0,198016,91,6,91],[0,198380,91,6,91],[0,198744,91,6,91],[0,199108,91,6,91],[0,199472,91,6,91],[0,199836,91,6,91],[0,200200,91,6,91],[0,200564,91,6,91],[0,200928,91,6,91],[0,201292,91,6,91],[0,201656,91,6,91],[0,202020,91,6,91],[0,202384,91,6,91],[0,202748,91,6,91],[0,203112,91,6,91],[0,203476,91,6,91],[0,203840,91,6,91],[0,204204,91,6,91],[0,204568,91,6,91],[0,204932,91,6,91],[0,205296,91,6,91],[0,205660,91,6,91],[0,206024,91,6,91],[0,206388,91,6,91],[0,206752,91,6,91],[0,207116,91,6,91],[0,207480,91,6,91],[0,207844,91,6,91]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,273,22,91]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,1092,364,38,91]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,2548,273,22,91]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,3640,273,22,91]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,4732,364,38,91]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,6188,273,22,91]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,7280,273,22,91]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,8372,364,38,91]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,9828,273,22,91]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,10920,273,22,91]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,12012,364,38,91]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,13468,273,22,91]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,14560,273,22,91]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,15652,364,38,91]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,17108,273,22,91]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,18200,273,22,91]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,19292,364,38,91]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,20748,273,22,91]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,21840,273,22,91]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,22932,364,38,91]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,24388,273,22,91]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,25480,273,22,91]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,26572,364,38,91]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,28028,273,22,91]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,29120,273,22,91]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,30212,364,38,91]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,31668,273,22,91]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,32760,273,22,91]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,33852,364,38,91]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,35308,273,22,91]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,36400,273,22,91]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,37492,364,38,91]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,38948,273,22,91]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,40040,273,22,91]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,41132,364,38,91]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,42588,273,22,91]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,43680,273,22,91]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,44772,364,38,91]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,46228,273,22,91]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,47320,273,22,91]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,48412,364,38,91]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,49868,273,22,91]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,50960,273,22,91]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,52052,364,38,91]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,53508,273,22,91]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,54600,273,22,91]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,55692,364,38,91]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,57148,273,22,91]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,58240,273,22,91]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,59332,364,38,91]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,60788,273,22,91]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,61880,273,22,91]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,62972,364,38,91]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,64428,273,22,91]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,65520,273,22,91]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,66612,364,38,91]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,68068,273,22,91]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,69160,273,22,91]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,70252,364,38,91]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,71708,273,22,91]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,72800,273,22,91]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,73892,364,38,91]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,75348,273,22,91]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,76440,273,22,91]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,77532,364,38,91]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,78988,273,22,91]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,80080,273,22,91]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,81172,364,38,91]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,82628,273,22,91]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,83720,273,22,91]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,84812,364,38,91]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,86268,273,22,91]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,87360,273,22,91]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,88452,364,38,91]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,89908,273,22,91]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,91000,273,22,91]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,92092,364,38,91]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,93548,273,22,91]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,94640,273,22,91]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,95732,364,38,91]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,97188,273,22,91]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,98280,273,22,91]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,99372,364,38,91]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,100828,273,22,91]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,101920,273,22,91]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,103012,364,38,91]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,104468,273,22,91]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,105560,273,22,91]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,106652,364,38,91]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,108108,273,22,91]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,109200,273,22,91]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,110292,364,38,91]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,111748,273,22,91]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,112840,273,22,91]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,113932,364,38,91]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,115388,273,22,91]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,116480,273,22,91]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,117572,364,38,91]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,119028,273,22,91]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,120120,273,22,91]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,121212,364,38,91]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,122668,273,22,91]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,123760,273,22,91]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,124852,364,38,91]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,126308,273,22,91]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,127400,273,22,91]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,128492,364,38,91]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,129948,273,22,91]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,131040,273,22,91]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,132132,364,38,91]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,133588,273,22,91]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,134680,273,22,91]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,135772,364,38,91]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,137228,273,22,91]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,138320,273,22,91]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,139412,364,38,91]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,140868,273,22,91]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,141960,273,22,91]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,143052,364,38,91]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,144508,273,22,91]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,145600,273,22,91]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,146692,364,38,91]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,148148,273,22,91]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,149240,273,22,91]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,150332,364,38,91]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,151788,273,22,91]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,152880,273,22,91]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,153972,364,38,91]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,155428,273,22,91]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,156520,273,22,91]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,157612,364,38,91]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,159068,273,22,91]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,160160,273,22,91]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,161252,364,38,91]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,162708,273,22,91]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,163800,273,22,91]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,164892,364,38,91]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,166348,273,22,91]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,167440,273,22,91]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,168532,364,38,91]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,169988,273,22,91]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,171080,273,22,91]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,172172,364,38,91]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,173628,273,22,91]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,174720,273,22,91]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,175812,364,38,91]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,177268,273,22,91]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,178360,273,22,91]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,179452,364,38,91]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,180908,273,22,91]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,182000,273,22,91]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,183092,364,38,91]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,184548,273,22,91]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,185640,273,22,91]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,186732,364,38,91]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,188188,273,22,91]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[[6,"cocos_anim_jump",".bin",30,2,true,1.6666667461395264,1593009325,[[0,106080,51,6,51],[0,106284,51,6,51],[0,106488,51,6,51],[0,106692,51,6,51],[0,106896,51,6,51],[0,107100,51,6,51],[0,107304,51,6,51],[0,107508,51,6,51],[0,107712,51,6,51],[0,107916,51,6,51],[0,108120,51,6,51],[0,108324,51,6,51],[0,108528,51,6,51],[0,108732,51,6,51],[0,108936,51,6,51],[0,109140,51,6,51],[0,109344,51,6,51],[0,109548,51,6,51],[0,109752,51,6,51],[0,109956,51,6,51],[0,110160,51,6,51],[0,110364,51,6,51],[0,110568,51,6,51],[0,110772,51,6,51],[0,110976,51,6,51],[0,111180,51,6,51],[0,111384,51,6,51],[0,111588,51,6,51],[0,111792,51,6,51],[0,111996,51,6,51],[0,112200,51,6,51],[0,112404,51,6,51],[0,112608,51,6,51],[0,112812,51,6,51],[0,113016,51,6,51],[0,113220,51,6,51],[0,113424,51,6,51],[0,113628,51,6,51],[0,113832,51,6,51],[0,114036,51,6,51],[0,114240,51,6,51],[0,114444,51,6,51],[0,114648,51,6,51],[0,114852,51,6,51],[0,115056,51,6,51],[0,115260,51,6,51],[0,115464,51,6,51],[0,115668,51,6,51],[0,115872,51,6,51],[0,116076,51,6,51],[0,116280,51,6,51],[0,116484,51,6,51]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,153,22,51]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,612,204,38,51]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,1428,153,22,51]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,2040,153,22,51]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,2652,204,38,51]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,3468,153,22,51]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,4080,153,22,51]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,4692,204,38,51]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,5508,153,22,51]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,6120,153,22,51]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,6732,204,38,51]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,7548,153,22,51]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,8160,153,22,51]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,8772,204,38,51]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,9588,153,22,51]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,10200,153,22,51]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,10812,204,38,51]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,11628,153,22,51]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,12240,153,22,51]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,12852,204,38,51]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,13668,153,22,51]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,14280,153,22,51]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,14892,204,38,51]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,15708,153,22,51]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,16320,153,22,51]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,16932,204,38,51]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,17748,153,22,51]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,18360,153,22,51]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,18972,204,38,51]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,19788,153,22,51]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,20400,153,22,51]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,21012,204,38,51]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,21828,153,22,51]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,22440,153,22,51]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,23052,204,38,51]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,23868,153,22,51]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,24480,153,22,51]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,25092,204,38,51]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,25908,153,22,51]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,26520,153,22,51]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,27132,204,38,51]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,27948,153,22,51]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,28560,153,22,51]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,29172,204,38,51]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,29988,153,22,51]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,30600,153,22,51]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,31212,204,38,51]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,32028,153,22,51]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,32640,153,22,51]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,33252,204,38,51]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,34068,153,22,51]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,34680,153,22,51]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,35292,204,38,51]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,36108,153,22,51]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,36720,153,22,51]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,37332,204,38,51]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,38148,153,22,51]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,38760,153,22,51]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,39372,204,38,51]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,40188,153,22,51]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,40800,153,22,51]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,41412,204,38,51]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,42228,153,22,51]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,42840,153,22,51]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,43452,204,38,51]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,44268,153,22,51]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,44880,153,22,51]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,45492,204,38,51]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,46308,153,22,51]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,46920,153,22,51]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,47532,204,38,51]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,48348,153,22,51]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,48960,153,22,51]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,49572,204,38,51]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,50388,153,22,51]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,51000,153,22,51]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,51612,204,38,51]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,52428,153,22,51]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,53040,153,22,51]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,53652,204,38,51]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,54468,153,22,51]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,55080,153,22,51]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,55692,204,38,51]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,56508,153,22,51]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,57120,153,22,51]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,57732,204,38,51]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,58548,153,22,51]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,59160,153,22,51]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,59772,204,38,51]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,60588,153,22,51]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,61200,153,22,51]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,61812,204,38,51]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,62628,153,22,51]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,63240,153,22,51]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,63852,204,38,51]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,64668,153,22,51]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,65280,153,22,51]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,65892,204,38,51]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,66708,153,22,51]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,67320,153,22,51]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,67932,204,38,51]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,68748,153,22,51]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,69360,153,22,51]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,69972,204,38,51]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,70788,153,22,51]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,71400,153,22,51]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,72012,204,38,51]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,72828,153,22,51]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,73440,153,22,51]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,74052,204,38,51]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,74868,153,22,51]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,75480,153,22,51]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,76092,204,38,51]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,76908,153,22,51]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,77520,153,22,51]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,78132,204,38,51]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,78948,153,22,51]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,79560,153,22,51]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,80172,204,38,51]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,80988,153,22,51]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,81600,153,22,51]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,82212,204,38,51]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,83028,153,22,51]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,83640,153,22,51]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,84252,204,38,51]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,85068,153,22,51]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,85680,153,22,51]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,86292,204,38,51]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,87108,153,22,51]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,87720,153,22,51]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,88332,204,38,51]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,89148,153,22,51]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,89760,153,22,51]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,90372,204,38,51]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,91188,153,22,51]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,91800,153,22,51]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,92412,204,38,51]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,93228,153,22,51]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,93840,153,22,51]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,94452,204,38,51]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,95268,153,22,51]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,95880,153,22,51]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,96492,204,38,51]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,97308,153,22,51]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,97920,153,22,51]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,98532,204,38,51]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,99348,153,22,51]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,99960,153,22,51]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,100572,204,38,51]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,101388,153,22,51]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,102000,153,22,51]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,102612,204,38,51]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,103428,153,22,51]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,104040,153,22,51]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,104652,204,38,51]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,105468,153,22,51]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[[6,"cocos_anim_run",".bin",30,2,true,0.8000000715255737,2585929260,[[0,52000,25,6,25],[0,52100,25,6,25],[0,52200,25,6,25],[0,52300,25,6,25],[0,52400,25,6,25],[0,52500,25,6,25],[0,52600,25,6,25],[0,52700,25,6,25],[0,52800,25,6,25],[0,52900,25,6,25],[0,53000,25,6,25],[0,53100,25,6,25],[0,53200,25,6,25],[0,53300,25,6,25],[0,53400,25,6,25],[0,53500,25,6,25],[0,53600,25,6,25],[0,53700,25,6,25],[0,53800,25,6,25],[0,53900,25,6,25],[0,54000,25,6,25],[0,54100,25,6,25],[0,54200,25,6,25],[0,54300,25,6,25],[0,54400,25,6,25],[0,54500,25,6,25],[0,54600,25,6,25],[0,54700,25,6,25],[0,54800,25,6,25],[0,54900,25,6,25],[0,55000,25,6,25],[0,55100,25,6,25],[0,55200,25,6,25],[0,55300,25,6,25],[0,55400,25,6,25],[0,55500,25,6,25],[0,55600,25,6,25],[0,55700,25,6,25],[0,55800,25,6,25],[0,55900,25,6,25],[0,56000,25,6,25],[0,56100,25,6,25],[0,56200,25,6,25],[0,56300,25,6,25],[0,56400,25,6,25],[0,56500,25,6,25],[0,56600,25,6,25],[0,56700,25,6,25],[0,56800,25,6,25],[0,56900,25,6,25],[0,57000,25,6,25],[0,57100,25,6,25]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,75,22,25]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,300,100,38,25]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,700,75,22,25]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,1000,75,22,25]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,1300,100,38,25]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,1700,75,22,25]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,2000,75,22,25]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,2300,100,38,25]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,2700,75,22,25]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,3000,75,22,25]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,3300,100,38,25]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,3700,75,22,25]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,4000,75,22,25]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,4300,100,38,25]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,4700,75,22,25]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,5000,75,22,25]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,5300,100,38,25]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,5700,75,22,25]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,6000,75,22,25]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,6300,100,38,25]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,6700,75,22,25]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,7000,75,22,25]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,7300,100,38,25]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,7700,75,22,25]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,8000,75,22,25]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,8300,100,38,25]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,8700,75,22,25]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,9000,75,22,25]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,9300,100,38,25]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,9700,75,22,25]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,10000,75,22,25]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,10300,100,38,25]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,10700,75,22,25]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,11000,75,22,25]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,11300,100,38,25]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,11700,75,22,25]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,12000,75,22,25]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,12300,100,38,25]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,12700,75,22,25]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,13000,75,22,25]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,13300,100,38,25]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,13700,75,22,25]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,14000,75,22,25]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,14300,100,38,25]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,14700,75,22,25]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,15000,75,22,25]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,15300,100,38,25]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,15700,75,22,25]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,16000,75,22,25]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,16300,100,38,25]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,16700,75,22,25]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,17000,75,22,25]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,17300,100,38,25]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,17700,75,22,25]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,18000,75,22,25]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,18300,100,38,25]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,18700,75,22,25]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,19000,75,22,25]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,19300,100,38,25]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,19700,75,22,25]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,20000,75,22,25]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,20300,100,38,25]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,20700,75,22,25]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,21000,75,22,25]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,21300,100,38,25]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,21700,75,22,25]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,22000,75,22,25]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,22300,100,38,25]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,22700,75,22,25]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,23000,75,22,25]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,23300,100,38,25]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,23700,75,22,25]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,24000,75,22,25]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,24300,100,38,25]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,24700,75,22,25]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,25000,75,22,25]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,25300,100,38,25]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,25700,75,22,25]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,26000,75,22,25]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,26300,100,38,25]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,26700,75,22,25]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,27000,75,22,25]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,27300,100,38,25]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,27700,75,22,25]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,28000,75,22,25]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,28300,100,38,25]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,28700,75,22,25]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,29000,75,22,25]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,29300,100,38,25]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,29700,75,22,25]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,30000,75,22,25]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,30300,100,38,25]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,30700,75,22,25]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,31000,75,22,25]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,31300,100,38,25]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,31700,75,22,25]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,32000,75,22,25]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,32300,100,38,25]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,32700,75,22,25]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,33000,75,22,25]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,33300,100,38,25]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,33700,75,22,25]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,34000,75,22,25]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,34300,100,38,25]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,34700,75,22,25]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,35000,75,22,25]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,35300,100,38,25]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,35700,75,22,25]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,36000,75,22,25]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,36300,100,38,25]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,36700,75,22,25]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,37000,75,22,25]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,37300,100,38,25]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,37700,75,22,25]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,38000,75,22,25]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,38300,100,38,25]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,38700,75,22,25]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,39000,75,22,25]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,39300,100,38,25]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,39700,75,22,25]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,40000,75,22,25]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,40300,100,38,25]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,40700,75,22,25]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,41000,75,22,25]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,41300,100,38,25]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,41700,75,22,25]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,42000,75,22,25]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,42300,100,38,25]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,42700,75,22,25]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,43000,75,22,25]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,43300,100,38,25]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,43700,75,22,25]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,44000,75,22,25]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,44300,100,38,25]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,44700,75,22,25]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,45000,75,22,25]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,45300,100,38,25]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,45700,75,22,25]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,46000,75,22,25]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,46300,100,38,25]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,46700,75,22,25]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,47000,75,22,25]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,47300,100,38,25]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,47700,75,22,25]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,48000,75,22,25]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,48300,100,38,25]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,48700,75,22,25]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,49000,75,22,25]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,49300,100,38,25]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,49700,75,22,25]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,50000,75,22,25]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,50300,100,38,25]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,50700,75,22,25]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,51000,75,22,25]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,51300,100,38,25]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,51700,75,22,25]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"544e49d6-3f05-4fa8-9a9e-091f98fc2ce8@6c48a","packable":true}],[1],0,[0],[2],[8]],[[[6,"cocos_anim_squat",".bin",30,2,true,1.8666667938232422,2475266070,[[0,118560,57,6,57],[0,118788,57,6,57],[0,119016,57,6,57],[0,119244,57,6,57],[0,119472,57,6,57],[0,119700,57,6,57],[0,119928,57,6,57],[0,120156,57,6,57],[0,120384,57,6,57],[0,120612,57,6,57],[0,120840,57,6,57],[0,121068,57,6,57],[0,121296,57,6,57],[0,121524,57,6,57],[0,121752,57,6,57],[0,121980,57,6,57],[0,122208,57,6,57],[0,122436,57,6,57],[0,122664,57,6,57],[0,122892,57,6,57],[0,123120,57,6,57],[0,123348,57,6,57],[0,123576,57,6,57],[0,123804,57,6,57],[0,124032,57,6,57],[0,124260,57,6,57],[0,124488,57,6,57],[0,124716,57,6,57],[0,124944,57,6,57],[0,125172,57,6,57],[0,125400,57,6,57],[0,125628,57,6,57],[0,125856,57,6,57],[0,126084,57,6,57],[0,126312,57,6,57],[0,126540,57,6,57],[0,126768,57,6,57],[0,126996,57,6,57],[0,127224,57,6,57],[0,127452,57,6,57],[0,127680,57,6,57],[0,127908,57,6,57],[0,128136,57,6,57],[0,128364,57,6,57],[0,128592,57,6,57],[0,128820,57,6,57],[0,129048,57,6,57],[0,129276,57,6,57],[0,129504,57,6,57],[0,129732,57,6,57],[0,129960,57,6,57],[0,130188,57,6,57]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,171,22,57]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,684,228,38,57]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,1596,171,22,57]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,2280,171,22,57]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,2964,228,38,57]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,3876,171,22,57]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,4560,171,22,57]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,5244,228,38,57]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,6156,171,22,57]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,6840,171,22,57]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,7524,228,38,57]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,8436,171,22,57]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,9120,171,22,57]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,9804,228,38,57]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,10716,171,22,57]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,11400,171,22,57]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,12084,228,38,57]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,12996,171,22,57]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,13680,171,22,57]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,14364,228,38,57]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,15276,171,22,57]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,15960,171,22,57]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,16644,228,38,57]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,17556,171,22,57]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,18240,171,22,57]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,18924,228,38,57]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,19836,171,22,57]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,20520,171,22,57]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,21204,228,38,57]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,22116,171,22,57]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,22800,171,22,57]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,23484,228,38,57]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,24396,171,22,57]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,25080,171,22,57]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,25764,228,38,57]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,26676,171,22,57]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,27360,171,22,57]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,28044,228,38,57]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,28956,171,22,57]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,29640,171,22,57]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,30324,228,38,57]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,31236,171,22,57]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,31920,171,22,57]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,32604,228,38,57]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,33516,171,22,57]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,34200,171,22,57]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,34884,228,38,57]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,35796,171,22,57]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,36480,171,22,57]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,37164,228,38,57]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,38076,171,22,57]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,38760,171,22,57]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,39444,228,38,57]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,40356,171,22,57]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,41040,171,22,57]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,41724,228,38,57]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,42636,171,22,57]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,43320,171,22,57]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,44004,228,38,57]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,44916,171,22,57]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,45600,171,22,57]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,46284,228,38,57]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,47196,171,22,57]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,47880,171,22,57]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,48564,228,38,57]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,49476,171,22,57]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,50160,171,22,57]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,50844,228,38,57]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,51756,171,22,57]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,52440,171,22,57]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,53124,228,38,57]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,54036,171,22,57]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,54720,171,22,57]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,55404,228,38,57]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,56316,171,22,57]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,57000,171,22,57]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,57684,228,38,57]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,58596,171,22,57]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,59280,171,22,57]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,59964,228,38,57]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,60876,171,22,57]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,61560,171,22,57]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,62244,228,38,57]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,63156,171,22,57]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,63840,171,22,57]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,64524,228,38,57]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,65436,171,22,57]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,66120,171,22,57]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,66804,228,38,57]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,67716,171,22,57]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,68400,171,22,57]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,69084,228,38,57]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,69996,171,22,57]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,70680,171,22,57]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,71364,228,38,57]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,72276,171,22,57]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,72960,171,22,57]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,73644,228,38,57]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,74556,171,22,57]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,75240,171,22,57]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,75924,228,38,57]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,76836,171,22,57]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,77520,171,22,57]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,78204,228,38,57]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,79116,171,22,57]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,79800,171,22,57]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,80484,228,38,57]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,81396,171,22,57]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,82080,171,22,57]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,82764,228,38,57]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,83676,171,22,57]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,84360,171,22,57]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,85044,228,38,57]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,85956,171,22,57]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,86640,171,22,57]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,87324,228,38,57]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,88236,171,22,57]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,88920,171,22,57]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,89604,228,38,57]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,90516,171,22,57]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,91200,171,22,57]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,91884,228,38,57]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,92796,171,22,57]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,93480,171,22,57]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,94164,228,38,57]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,95076,171,22,57]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,95760,171,22,57]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,96444,228,38,57]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,97356,171,22,57]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,98040,171,22,57]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,98724,228,38,57]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,99636,171,22,57]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,100320,171,22,57]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,101004,228,38,57]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,101916,171,22,57]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,102600,171,22,57]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,103284,228,38,57]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,104196,171,22,57]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,104880,171,22,57]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,105564,228,38,57]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,106476,171,22,57]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,107160,171,22,57]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,107844,228,38,57]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,108756,171,22,57]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,109440,171,22,57]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,110124,228,38,57]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,111036,171,22,57]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,111720,171,22,57]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,112404,228,38,57]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,113316,171,22,57]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,114000,171,22,57]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,114684,228,38,57]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,115596,171,22,57]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,116280,171,22,57]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,116964,228,38,57]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,117876,171,22,57]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[[23,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_EMISSIVE_MAP":true,"OCCLUSION_CHANNEL":"b","ROUGHNESS_CHANNEL":"r","METALLIC_CHANNEL":"g","USE_SKINNING":true}],[[[{"occlusion":1,"roughness":0.8,"metallic":0.6},"normalMap",6,0,"emissiveMap",6,1,"mainTexture",6,2]],11]]],0,0,[0,0,0,0],[6,11,7,4],[9,10,11,1]],[[[11,".bin",432438,1653151907,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":149616,"length":13722,"count":6861,"stride":2}},{"primitiveMode":7,"jointMapIndex":1,"vertexBundelIndices":[1],"indexView":{"offset":192210,"length":2304,"count":1152,"stride":2}},{"primitiveMode":7,"jointMapIndex":2,"vertexBundelIndices":[2],"indexView":{"offset":286962,"length":8064,"count":4032,"stride":2}},{"primitiveMode":7,"jointMapIndex":3,"vertexBundelIndices":[3],"indexView":{"offset":421242,"length":11196,"count":5598,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":149616,"count":2078,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":163338,"length":28872,"count":401,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":194514,"length":92448,"count":1284,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]},{"view":{"offset":295026,"length":126216,"count":1753,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,1,2,3,5,6,7,8,9,10,11,12,13,14,15,16,24,25,26,27,31,34,37,40,44,45,48,49],[0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,26,27,28,29,30,31,32,33,34,35],[0,3,7,8,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,45,46,47,48,49,50,51],[0,1,2,3,5,6,24,25,43,50,51]]},"minPosition",8,[1,-1.1286969184875488,0.0004072114825248718,-0.9644851088523865],"maxPosition",8,[1,1.1280615329742432,4.430077075958252,0.6853569149971008]]]],0,0,[],[],[]],[[[26,"Main"],[27,"StartMenu",33554432,[-2,-3,-4,-5,-6],[[45,-1]]],[28,[46,"a1neOoI9JPe45MvlxJ49KN",-7,[48,"ffqPDfVatGvZx2Du0N8Alx",null,[[17,["lightmapSettings"],[9,["f3k8XsWJ1JC6Eq4p92Ewd4"]],[10]],[17,["lightmapSettings"],[9,["875esuRphD/LcJMnDNdIE1"]],[10]]]],0]],[29,"Canvas",33554432,"28Dc5Gkt5A27OYzrdOJBVj",[1,-12,-13],[[8,-8,[5,960,640]],[49,-10,-9],[50,45,-11]],[1,480,320,0]],[30,"PlayButton",33554432,1,[-19],[[8,-14,[5,100,40]],[51,1,0,-15,7],[53,2,-18,[[54,"326d6DtDjZPxJ4SwTMVuYAe","onStartButtonClicked",-17]],[4,4292269782],-16,8,9,10,11]],[1,0,-61.714,0]],[55,"Main",[-21,-22,-23,3],[47,[[56,["CocosAnim"],-20,2,[9,["09cn05iw1NR7cjsZM2tLUI"]]],[18,["_skinningRoot"],2,[9,["09cn05iw1NR7cjsZM2tLUI"]],2,[9,["a1neOoI9JPe45MvlxJ49KN"]]],[18,["_skinningRoot"],2,[9,["09cn05iw1NR7cjsZM2tLUI"]],2,[9,["a1neOoI9JPe45MvlxJ49KN"]]]]],[57,[58],[59,true,-1,[1,0,0,1],[4,3155827482]],[60],[61]]],[31,"Body",[2,-26],[[62,"Capsule<MeshRenderer>",false,1,-24,[1],[10],2],[64,"Body<Animation>",-25,[3,4]]]],[41,"Player","5eNYipOMZCY4vslaQN3tTE",5,[6,-28],[-27]],[65,"Player<PlayerController>",7],[32,"GameManager","b9lUNzqMhCppJhVsGDTLOD",5,[[66,-30,1,8,-29,5]]],[43,"Steps",33554432,3,[[[8,-31,[5,27.81,75.6]],-32],4,1],[1,0,270,0]],[16,"BG",33554432,1,[[8,-33,[5,400,200]],[52,0,-34,6]]],[16,"Label",33554432,4,[[8,-35,[5,100,40]],[67,1,"Play",20,20,1,false,-36,[4,4278190080]]]],[13,"Title",33554432,1,[[8,-37,[5,292.03,50.4]],[68,"Mind Your Steps",0,0,40,-38,[4,4278190080]]],[1,0,70,0]],[13,"Tips",33554432,1,[[8,-39,[5,253.45,50.4]],[19,"Mouse Left Click: One Steps",0,20,20,-40,[4,4278190080]]],[1,0,26.057,0]],[13,"Tips",33554432,1,[[8,-41,[5,265.65,50.4]],[19,"Mouse Right Click: Two Steps",0,20,20,-42,[4,4278190080]]],[1,0,-5.486,0]],[33,"Main Light","c0y6F5f+pAvI805TdmxIjx",5,[[70,"Main Light<DirectionalLight>",-43,[20]]],[1,2.668,3.56,4.486],[3,-0.012593290635294484,0.15649886801221127,-0.07812061927953355,0.9845032667214739],[1,-0.02,18.063,-9.077]],[34,"Spot Light",6,[[71,"Spot Light<SpotLight>",0.3,168868.6394038963,35,75,-44,[20]]],[1,6.899,7.674,6.158],[3,-0.3129626640691408,0.15925033927042992,-0.12292337248246524,0.9282152470405429],[1,-34.998,13.385,-19.14]],[35,"Camera",7,[[72,"Camera<Camera>",1820327937,-45,[4,4294924850]]],[1,0,0,13]],[69,"0",0,0,50,50,60,10],[42,"UICamera_Canvas",33554432,3,[-46],[1,0,0,1000]],[73,0,1073741824,320,2000,0,41943040,20,[4,0]]],0,[0,0,1,0,-1,11,0,-2,4,0,-3,13,0,-4,14,0,-5,15,0,5,2,0,0,3,0,12,21,0,0,3,0,0,3,0,-2,10,0,-3,20,0,0,4,0,0,4,0,13,4,0,14,9,0,0,4,0,-1,12,0,15,8,0,-1,16,0,-2,7,0,-3,9,0,0,6,0,0,6,0,-2,17,0,-1,8,0,-2,18,0,16,19,0,0,9,0,0,10,0,-2,19,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,0,17,0,0,18,0,-1,21,0,17,5,1,1,3,2,1,6,3,1,5,6,1,7,46],[0,0,0,0,0,0,0,0,0,0,0,0],[18,-1,3,-1,-2,19,8,8,20,21,22,23],[12,3,13,14,15,16,17,2,2,2,18,19]],[[[21,"Cocos"],[36,"Cocos",[-3,-4,-5],[[74,"Cocos<SkeletalAnimation>",true,-2,[12,"09cn05iw1NR7cjsZM2tLUI"],[9,10,11,12,13,14,15,16,17],18]],[2,"a1neOoI9JPe45MvlxJ49KN",-1,0],[1,0,-1,0],[3,0,0.7071067811865475,0,0.7071067811865476],[1,0,90,0]],[14,"Bip002 L Hand",[-6,-7,-8,-9,-10],[2,"2fyjSbQ7xI85868cDi1BON",1,0],[1,0.47114282846450806,0,0],[3,-0.7817653287697258,0.1683952333366485,-0.08155837519558504,0.5948396822325442],[1,-104.63046774967047,4.477105279013093,-21.119814351765044]],[14,"Bip002 R Hand",[-11,-12,-13,-14,-15],[2,"6fYu5zukpPj64dc26lAoJa",1,0],[1,0.4711427092552185,0,0],[3,0.7817653292447713,0.16839523343897508,0.08155836779456409,0.5948396825940029],[1,104.63046763851519,4.477105986515138,21.119813834233387]],[14,"Bip002 Spine",[-16,-17,-18],[2,"8deDWIEsNAVZotnnzWCMVu",1,0],[1,0.252804160118103,3.5096945794066414e-7,0.0002744346857070923],[3,-0.0000020804759106072992,0.0003981590192705819,6.93676086032503e-7,0.9999999207322898],[1,-0.00023843660864713534,0.04562566412936542,0.00007939449476443857]],[44,"Bip002 Neck",[[-19,-20,[4,"Bip002 Head",-21,[2,"70Uyg4SgBNgZyTos+JFACM",1,0],[1,0.18754291534423828,0,-1.4901161193847656e-8],[3,-8.786147143705162e-14,-0.03122232576672472,-8.659632757083116e-8,0.9995124643413452],[1,-3.098357017926332e-7,-3.5783965369060278,-0.000009918369950092832]]],1,1,4],[2,"48O3/ZnNFOtq3YdFKY9bYC",1,0],[1,0.665433406829834,-4.1106318349193316e-10,0.0001481771469116211],[3,-2.669600780358255e-15,0.06157424794471617,1.7078236050205865e-7,0.9981025057527976],[1,-0.000001205021695781177,7.060355294193349,0.000019533082551195423]],[37,"Helmet",false,1,[[75,-22,[12,"f3k8XsWJ1JC6Eq4p92Ewd4"],[0],[10],1,1,2]],[2,"08w+mQintPPJni7B5pVUA9",1,0],[1,0,0,0.078]],[38,"Body",1,[[76,"Body<SkinnedMeshRenderer>",1,-23,[12,"875esuRphD/LcJMnDNdIE1"],[3,4,5,6],[10],1,7,8]],[2,"c5+3Gei8tMXZoufi9OMMmd",1,0]],[3,"Bip002",1,[-24],[2,"a18b0WSP1IJYLSp2LzpK6G",1,0],[1,0,1.4394174814224243,0.018384279683232307],[3,0,-0.7071062745468981,0,0.707107287825834],[1,0,-89.99991789555972,0]],[39,"Bip002 Pelvis",8,[4],[2,"b3I01gYUpG7L3rkY/Mibc5",1,0],[3,-0.49999930709576956,-0.49999999254917427,0.49999999254917427,0.5000007078049009],[1,0,-89.99983949055928,90]],[3,"Bip002 Spine1",4,[5],[2,"2cIfzNQt9D2pv5w60GTFAu",1,0],[1,0.3447195291519165,-9.74392122543577e-10,0.0003513079136610031],[3,-2.7546581747168357e-14,-0.03077978788265575,-8.537083465802896e-8,0.999526190081026],[1,-3.011149572685769e-7,-3.5276610445001966,-0.000009778141764872751]],[3,"Bip002 L Clavicle",5,[-25],[2,"7cXdrNZBZD8LJU7Yk+guQM",1,0],[1,-0.23000192642211914,0.22659029066562653,0.028323352336883545],[3,-0.6361306084451803,-0.7690886582797952,-0.039499043019708864,-0.04775259474705402],[1,-0.0008424411902544296,172.89484678972258,79.18984857171966]],[3,"Bip002 L UpperArm",11,[-26],[2,"55gwDaMHdCELN99NqjrXTf",1,0],[1,0.26367461681365967,0,-1.4901161193847656e-8],[3,0.03357857419689301,-0.0398420723278534,-0.37206974115274943,0.9267411700933825],[1,2.58846521639648,-3.8824087528549023,-43.81248042439644]],[3,"Bip002 L Forearm",12,[2],[2,"5bGul9+4VOypjomb2RRYPn",1,0],[1,0.5116827487945557,0,7.450580596923828e-9],[3,3.595055336630338e-9,-0.12936039168638325,-8.65297959901121e-9,0.9915976447444527],[1,2.802331504559222e-7,-14.8652667455545,-0.0000010365186908483014]],[3,"Bip002 L Finger0",2,[-27],[2,"c5VzuQWgNOsrF2rrJeuq8C",1,0],[1,0.06814885139465332,-0.1017833948135376,-0.06761693954467773],[3,0.6496226701202772,0.13313679220106886,-0.27934604511816163,0.6944283750719386],[1,90.00514239541948,34.12255839711849,-12.415191931135967]],[5,"Bip002 L Finger01",14,[[4,"Bip002 L Finger02",-28,[2,"cfOm3mUKxHZpbykpHeldRB",1,0],[1,0.07074201107025146,-1.1920928955078125e-7,0],[3,1.8324129233223919e-9,0.06414267544090939,-3.0466139086633286e-9,0.9979407383142961],[1,2.3193990135916585e-7,7.35525867313462,-3.349286975641872e-7]]],[2,"ee/oE2fthDvpZjxb8j87lp",1,0],[1,0.07074236869812012,5.960464477539063e-8,0],[3,-6.301759601313711e-9,0.11640221704419262,1.7627159851268195e-9,0.9932021565961265],[1,-7.407319011787383e-7,13.36901877485849,1.1656190691351391e-7]],[3,"Bip002 L Finger1",2,[-29],[2,"ecRF2OO+1Kg6ZHFc6ngoEu",1,0],[1,0.25803840160369873,-0.07605993747711182,0.000060439109802246094],[3,0.06533004228890654,0.1550997319427988,-0.010403928164399058,0.9856813973107901],[1,7.586134386714674,17.88558687467142,-0.014012989797106726]],[5,"Bip002 L Finger11",16,[[4,"Bip002 L Finger12",-30,[2,"50tWSvEf9Fm55wIO/kXA6+",1,0],[1,0.06295216083526611,-5.960464477539063e-8,5.960464477539063e-8],[3,9.683549130913256e-9,0.11640222439382181,3.0495184335786466e-9,0.993202155734758],[1,0.0000010614330943463798,13.36901962282832,4.76239647768404e-7]]],[2,"81228lZ3FD7q1EgLlhKhs+",1,0],[1,0.06295228004455566,0,0],[3,-1.8788470906461414e-9,0.11640221704419262,3.4289460392435338e-9,0.9932021565961265],[1,-2.595741635394667e-7,13.369018774858489,3.651958082463327e-7]],[3,"Bip002 L Finger2",2,[-31],[2,"2aPHIeH9FP+7frqZX7ZIoj",1,0],[1,0.2580385208129883,-0.025353312492370605,0.00002014636993408203],[3,0.0042401966213926326,0.2556978438501499,0.01738229190274643,0.9665911696840623],[1,-0.039683012266759236,29.635441592310343,2.0499966555654097]],[5,"Bip002 L Finger21",18,[[4,"Bip002 L Finger22",-32,[2,"7dSNVzKQxPcbtnBEaIEB+c",1,0],[1,0.06567466259002686,0,0],[3,-4.196536333144121e-9,0.12609809280913337,6.279188991271274e-9,0.992017777557388],[1,-5.677819697538621e-7,14.488347335565956,6.531594968063432e-7]]],[2,"a8xnnQj4RKWYjzo1x9v30f",1,0],[1,0.0569310188293457,0,-5.960464477539063e-8],[3,-1.879008444213511e-9,0.1260981221375761,-5.042347711207478e-9,0.9920177738293688],[1,-1.4073896886606418e-7,14.48835072340038,-6.003495308011543e-7]],[3,"Bip002 L Finger3",2,[-33],[2,"e3fSt5hg1CgpDj5bwWcSD/",1,0],[1,0.25801753997802734,0.03340023756027222,-0.00006508827209472656],[3,-0.05963092233274884,0.3167688812568696,0.08301036715765372,0.9429798024949254],[1,-9.568603704205783,37.708400576456086,6.821453378192049]],[5,"Bip002 L Finger31",20,[[4,"Bip002 L Finger32",-34,[2,"1bSRt8xYdMN7+sCEFD6LR6",1,0],[1,0.05428910255432129,-2.9802322387695312e-8,0],[3,-2.413381305187966e-9,0.07800656662404377,2.510812036653885e-9,0.9969528452055937],[1,-2.981543089612157e-7,8.947984562719617,2.652681849571953e-7]]],[2,"baERHNBGVLl72Ownxu6ZQ0",1,0],[1,0.04921448230743408,2.9802322387695312e-8,5.960464477539063e-8],[3,7.25791116532672e-10,0.15822037337903314,-1.356164119535318e-9,0.9874038249104565],[1,1.0671014845393109e-7,18.207230800284727,-1.40288337685695e-7]],[3,"Bip002 L Finger4",2,[-35],[2,"d6muAxrXBLFK8dAV+1rmFI",1,0],[1,0.24704039096832275,0.08190596103668213,-0.019670486450195312],[3,-0.0868145707558189,0.24745159160800334,0.048052826466605275,0.9638059275516617],[1,-11.032304263426557,29.07365775053084,2.846616324665754]],[5,"Bip002 L Finger41",22,[[4,"Bip002 L Finger42",-36,[2,"faDpyFtGxHJbNMHmkni93+",1,0],[1,0.03881120681762695,0,5.960464477539063e-8],[3,8.813586594615997e-10,0.11640220969456343,3.353601200164617e-9,0.993202157457495],[1,5.557699000156113e-8,13.369017926888654,3.9343820529302227e-7]]],[2,"c1dGEnlTdKSJI2DFSBS02j",1,0],[1,0.038811326026916504,0,-1.1920928955078125e-7],[3,-5.000861976308559e-9,0.11640222439382181,-5.896313694376953e-9,0.993202155734758],[1,-4.905117886222559e-7,13.369019622828322,-7.377797539020772e-7]],[3,"Bip002 R Clavicle",5,[-37],[2,"682YiTEqFHWLDY6SI1LKbb",1,0],[1,-0.23000192642211914,-0.22659046947956085,0.02832210063934326],[3,0.6361305082140936,-0.7690887408292874,0.03949691333207712,-0.04775436195928766],[1,-0.0008402105032285468,172.89319349414328,-79.18981406818966]],[3,"Bip002 R UpperArm",24,[-38],[2,"ddy6WzYfNIwoReERS6lbAX",1,0],[1,0.2636745870113373,0,-7.450580596923828e-9],[3,-0.033578574201876855,-0.039842068608476645,0.37206974120797326,0.9267411702309325],[1,-2.5884654373438716,-3.8824082042793497,43.81248042084942]],[3,"Bip002 R Forearm",25,[3],[2,"3dBakgtOdFW7vl77V+n7ng",1,0],[1,0.5116827487945557,0,1.4901161193847656e-8],[3,-2.8218932527204763e-10,-0.12936039168638322,2.3248222722025306e-8,0.9915976447444524],[1,3.12557750797446e-7,-14.86526674555451,0.000002645848855271084]],[3,"Bip002 R Finger0",3,[-39],[2,"3eyRM7FHlCdITaAb1mFEqy",1,0],[1,0.06814885139465332,0.1017833948135376,-0.06761682033538818],[3,-0.6496226726978404,0.13313676292700494,0.27934604622654674,0.6944283778272812],[1,-90.00514286106886,34.12255612569189,12.415194302873646]],[5,"Bip002 R Finger01",27,[[4,"Bip002 R Finger02",-40,[2,"dev5gI/3ZJpoBoopjdgkBv",1,0],[1,0.07074189186096191,0,5.960464477539063e-8],[3,5.042963926086063e-10,0.06414266060105547,-4.985999713810523e-9,0.997940739268128],[1,9.431724143848417e-8,7.3552569691035785,-5.664702316068646e-7]]],[2,"3cOUIrmrxOooZ9H7UAuOTS",1,0],[1,0.07074224948883057,0,0],[3,3.5845116007308622e-9,0.11640221704419262,4.119504321149127e-9,0.9932021565961265],[1,3.530136462864767e-7,13.369018774858487,5.166641959465336e-7]],[3,"Bip002 R Finger1",3,[-41],[2,"4beb88UM9ObqmEDKU5eOYn",1,0],[1,0.25803840160369873,0.07605987787246704,0.000060558319091796875],[3,-0.06533004229080558,0.1550997319473073,0.010403925370733808,0.9856813973394422],[1,-7.586134337052036,17.88558685374288,0.014012674217117068]],[5,"Bip002 R Finger11",29,[[4,"Bip002 R Finger12",-42,[2,"837O9hLxRAdrOUOSVI3XKQ",1,0],[1,0.06295204162597656,5.960464477539063e-8,5.960464477539063e-8],[3,-3.6999656858274864e-9,0.11640223174345095,6.099035973689393e-9,0.9932021548733893],[1,-5.024559447373246e-7,13.369020470798155,6.447942589725642e-7]]],[2,"1fh+L6AMlLWqHhwyvIpQch",1,0],[1,0.06295216083526611,-5.960464477539063e-8,0],[3,1.8788468702309913e-9,0.11640220969456343,-5.597105488556948e-9,0.993202157457495],[1,2.884945873600084e-7,13.369017926888658,-6.119596418013506e-7]],[3,"Bip002 R Finger2",3,[-43],[2,"64Nl8m1UtDT5x9wRhiWlUw",1,0],[1,0.2580385208129883,0.025353312492370605,0.000020265579223632812],[3,-0.004240193329510334,0.2556978717074886,-0.017382291770526838,0.9665911623316206],[1,0.03968343233867504,29.635444901844444,-2.0499965432842004]],[5,"Bip002 R Finger21",31,[[4,"Bip002 R Finger22",-44,[2,"4fDfCGBVNGO5XXancku+98",1,0],[1,0.0656747817993164,1.1920928955078125e-7,0],[3,9.395040000621576e-10,0.1260981221375761,-3.758016444337826e-9,0.9920177738293688],[1,1.6110238015344363e-7,14.48835072340038,-4.136238950734458e-7]]],[2,"c9Cks43jdPLJ6NXpcYg9nM",1,0],[1,0.0569310188293457,-1.1920928955078125e-7,0],[3,4.697524458856119e-10,0.12609809280913337,-6.246201296294787e-11,0.992017777557388],[1,5.4302546930414785e-8,14.488347335565951,-3.126676252684355e-10]],[3,"Bip002 R Finger3",3,[-45],[2,"9b02Y8cGlB3rdl42a0B+bS",1,0],[1,0.25801753997802734,-0.03340023756027222,-0.00006496906280517578],[3,0.05963092657085492,0.31676885417870576,-0.08301037532210935,0.9429798106043913],[1,9.568604288265075,37.70839744093824,-6.821454375815925]],[5,"Bip002 R Finger31",33,[[4,"Bip002 R Finger32",-46,[2,"b1+w+GP45CQbyW5GN6VEaV",1,0],[1,0.05428886413574219,2.9802322387695312e-8,0],[3,1.0490014566492711e-9,0.0780065518135563,0,0.9969528463644401],[1,1.1984042401763774e-7,8.947982860375465,9.376911134343753e-9]]],[2,"05TJ2KsRFPULnU7vt51S4G",1,0],[1,0.04921460151672363,0,-1.1920928955078125e-7],[3,-2.676862101654255e-9,0.15822038269091204,3.6019432370185636e-9,0.9874038234183323],[1,-3.681878026919706e-7,18.20723188095982,3.5901975220473506e-7]],[3,"Bip002 R Finger4",3,[-47],[2,"98hVVqDDtAi564bjFmKBxp",1,0],[1,0.24704039096832275,-0.08190596103668213,-0.019670486450195312],[3,0.08681456833311438,0.2474516059391916,-0.048052832974880756,0.9638059237659509],[1,11.032304226872471,29.0736595169429,-2.846616949519205]],[5,"Bip002 R Finger41",35,[[4,"Bip002 R Finger42",-48,[2,"1cTb9ljoJGPbfhFxOK86Pn",1,0],[1,0.038811326026916504,0,-5.960464477539063e-8],[3,2.2836150863248153e-9,0.11640223174345095,2.8467954803739885e-9,0.9932021548733893],[1,2.219315438841654e-7,13.36902047079815,3.5446163462257066e-7]]],[2,"faj/dDuG1Kr7pqIVcHJrAt",1,0],[1,0.038811326026916504,0,0],[3,-3.859055320334328e-9,0.11640222439382181,8.884043553333528e-10,0.993202155734758],[1,-4.510592258600949e-7,13.369019622828322,4.9636765904260794e-8]],[3,"Bip002 L Thigh",4,[-49],[2,"a9Xu0Fct5C0YVpUWzQpc5c",1,0],[1,-0.2528039216995239,0.2641824185848236,-0.000475078821182251],[3,-0.007310619912619043,0.014188269830691559,-0.993821603158877,-0.10983564508129504],[1,178.24977359484376,-178.96386343214957,12.597850192803794]],[3,"Bip002 L Calf",37,[-50],[2,"95XuyPUElHxraEM6bB+diO",1,0],[1,0.6210788488388062,0,1.862645149230957e-9],[3,-3.4676556204086317e-11,-0.021934063750405283,3.70651969783765e-9,0.9997594194842042],[1,5.343499009245589e-9,-2.513660143389423,4.247208456486013e-7]],[5,"Bip002 L Foot",38,[[4,"Bip002 L Toe0",-51,[2,"54uncdc4JDm7nQEgOB6cz1",1,0],[1,0.22456009685993195,0,-0.2889990508556366],[3,1.5454311872698817e-8,0.7071067811865474,-1.5454311872698817e-8,0.7071067811865474],[1,0.000002504478444114821,90.00000000000001,0]]],[2,"dcZakfp21ND6qv77uyl/si",1,0],[1,0.6210787892341614,0,-5.587935447692871e-9],[3,-0.1345264601088139,0.012528476188518371,0.11271523579192666,0.9843987730769254],[1,-15.920926482238785,3.2305942475318408,12.623450616107252]],[3,"Bip002 R Thigh",4,[-52],[2,"c5MdLcaTFKn5hqdDEdJvHK",1,0],[1,-0.2528039216995239,-0.2641824185848236,-0.0004765428602695465],[3,-0.007310314191753449,-0.01418551260877592,-0.9938216328763596,0.10983575267375542],[1,-178.25009918810895,-178.96393440973864,-12.597866007369333]],[3,"Bip002 R Calf",40,[-53],[2,"0aoMPw/7pH5In99fZ2xGl0",1,0],[1,0.6210788488388062,-5.960464477539063e-8,9.313225746154785e-10],[3,3.2684304733649494e-10,-0.021934063750405283,-1.0213622317302408e-11,0.9997594194842042],[1,3.741877226333374e-8,-2.513660143389423,-1.991619785845318e-9]],[5,"Bip002 R Foot",41,[[4,"Bip002 R Toe0",-54,[2,"73rMh0+rpNwLknuy8eMA0A",1,0],[1,0.22456009685993195,0,-0.2889990210533142],[3,-1.0185953588390975e-8,0.7071067811865474,2.0722666604292914e-8,0.7071067811865474],[1,-0.0000025044781562438674,90.00000000000004,8.537737182193318e-7]]],[2,"59DrDnrGtOoYU4c4rHB4fH",1,0],[1,0.6210787296295166,0,-5.587935447692871e-9],[3,0.13452647352112787,0.012528462080023426,-0.11271531650085638,0.9843987621822726],[1,15.9209284446258,3.2305941714865503,-12.623460004848537]]],0,[0,5,1,0,0,1,0,-1,6,0,-2,7,0,-3,8,0,-1,14,0,-2,16,0,-3,18,0,-4,20,0,-5,22,0,-1,27,0,-2,29,0,-3,31,0,-4,33,0,-5,35,0,-1,10,0,-2,37,0,-3,40,0,-1,11,0,-2,24,0,1,5,0,0,6,0,0,7,0,-1,9,0,-1,12,0,-1,13,0,-1,15,0,1,15,0,-1,17,0,1,17,0,-1,19,0,1,19,0,-1,21,0,1,21,0,-1,23,0,1,23,0,-1,25,0,-1,26,0,-1,28,0,1,28,0,-1,30,0,1,30,0,-1,32,0,1,32,0,-1,34,0,1,34,0,-1,36,0,1,36,0,-1,38,0,-1,39,0,1,39,0,-1,41,0,-1,42,0,1,42,0,9,1,2,1,13,3,1,26,4,1,9,5,1,10,54],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,3,10,-1,-2,-3,-4,3,10,-1,-2,-3,-4,-5,-6,-7,-8,-9,24],[20,21,4,0,0,0,0,22,4,5,23,24,25,26,27,28,29,30,5]],[[{"name":"default_sprite_splash","rect":{"x":0,"y":0,"width":2,"height":2},"offset":{"x":0,"y":0},"originalSize":{"width":2,"height":2},"rotated":false,"capInsets":[0,0,0,0],"texture":"7d8f9b89-4fd1-4c9f-a3ab-38ec7cded7ca@6c48a","packable":true}],[1],0,[0],[2],[31]],[[[24,"1",[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{"USE_NORMAL_MAP":true,"USE_ALBEDO_MAP":true,"USE_METALLIC_ROUGHNESS_MAP":true,"ROUGHNESS_CHANNEL":"g","METALLIC_CHANNEL":"b","OCCLUSION_CHANNEL":"g","USE_SKINNING":true}],[[[{"occlusion":1,"roughness":1,"metallic":1},"emissive",8,[4,0],"normalMap",6,0,"pbrMap",6,1,"metallicRoughnessMap",6,2,"mainTexture",6,3]],11]]],0,0,[0,0,0,0,0],[6,25,26,7,4],[32,6,6,33,1]],[[[15,"twoStep",30,0.3,4216177424,[[0,0.16666666666666666,0.3]],[[[{},"modifiers",12,[[[1,"/"],"position"],4,0],"data",11,[{"keys":0,"easingMethods":[null,null,null]},"values",12,[[[1,0,0,0],[1,0,1,0],[1,0,0,0]],8,8,8]]]],11]]],0,0,[],[],[]],[[[77,"cocos_skel",2489756589,["Bip002","Bip002/Bip002 Pelvis","Bip002/Bip002 Pelvis/Bip002 Spine","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot","Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"],[[[7,0.000001370906943520822,0,-1,0,0,1,0,0,1,0,0.000001370906943520822,0,-0.018384279683232307,-1.4394174814224243,-2.520313735487889e-8,1],[7,-0.0000013868001360606286,1,-0.0000027577070795814507,0,1,0.0000013868000223737909,0,0,3.824388722373229e-12,-0.0000027577070795814507,-1,0,-1.4394174814224243,-0.000001945485792020918,0.018384279683232307,1],[7,1.0916177961561857e-9,1.0000001192092896,0.0000014026936696609482,0,0.9999997019767761,-2.208607741138735e-9,0.0007963179959915578,0,0.0007963180541992188,0.0000014026924191057333,-0.9999997615814209,0,-1.6922355890274048,-2.1288762752647017e-8,0.016762293875217438,1],[7,-8.326291123239571e-8,1.0000001192092896,0.0000014052243386686314,0,0.9981539249420166,1.6845628181272332e-7,-0.060735587030649185,0,-0.060735590755939484,0.0000013975729871162912,-0.9981539845466614,0,-2.03208589553833,-3.6785644397241413e-7,0.14171460270881653,1],[7,8.556218489275125e-8,1.0000001192092896,0.0000014053661061552702,0,0.9980504512786865,-1.7310831879058242e-7,0.06241287291049957,0,0.06241287663578987,0.0000013972860415378818,-0.9980505108833313,0,-2.694465398788452,5.551611366172438e-7,-0.19107219576835632,1],[7,0.9822540283203125,0.18755564093589783,0.0000013774262015431304,0,-0.18720030784606934,0.9803928136825562,0.06153041124343872,0,0.011539025232195854,-0.06043875589966774,0.9981052875518799,0,0.24119485914707184,-2.471292495727539,-0.08715686947107315,1],[7,0.5773323774337769,0.8099624514579773,-0.10319074988365173,0,-0.8104954957962036,0.5837955474853516,0.047747764736413956,0,0.098916195333004,0.056069307029247284,0.993514895439148,0,1.6904339790344238,-1.8049393892288208,-0.00392431765794754,1],[7,0.531536877155304,0.8099625110626221,-0.2478499859571457,0,-0.7711201310157776,0.5837954878807068,0.25407981872558594,0,0.3504888117313385,0.05606932193040848,0.9348871111869812,0,1.138293743133545,-1.8049392700195312,-0.3061979115009308,1],[7,0.22052259743213654,-0.0418953076004982,0.9744818806648254,0,-0.9459825754165649,-0.2526299059391022,0.20321203768253326,0,0.23766961693763733,-0.9666554927825928,-0.09534277021884918,0,1.2930899858474731,0.6075429916381836,-1.3249390125274658,1],[7,-0.3465713560581207,0.9304307699203491,0.11910998821258545,0,-0.8218239545822144,-0.3623966574668884,0.4396296739578247,0,0.452210009098053,0.054475732147693634,0.8902463316917419,0,1.5266603231430054,-0.35380733013153076,-1.0623615980148315,1],[7,-0.3647204637527466,0.9304308295249939,0.03574734926223755,0,-0.9012053608894348,-0.3623966574668884,0.23769253492355347,0,0.23411117494106293,0.05447572469711304,0.9706823825836182,0,1.6621055603027344,-0.3538074493408203,-0.6969326734542847,1],[7,-0.366295725107193,0.9304307103157043,-0.011238742619752884,0,-0.9242193102836609,-0.36239662766456604,0.12036329507827759,0,0.10791686922311783,0.05447573587298393,0.9926661849021912,0,1.667490839958191,-0.353807270526886,-0.4874696433544159,1],[7,-0.08940479904413223,0.08982105553150177,0.9919371008872986,0,-0.9626128673553467,-0.2634757459163666,-0.06290377676486969,0,0.2557012438774109,-0.9604752659797668,0.11001893877983093,0,1.3917920589447021,0.5534547567367554,-1.0251199007034302,1],[7,-0.31633952260017395,0.08982105553150177,0.9443843364715576,0,-0.9219822883605957,-0.2634757459163666,-0.28377625346183777,0,0.2233332246541977,-0.9604752659797668,0.16616125404834747,0,1.5298596620559692,0.5534547567367554,-0.6900835037231445,1],[7,-0.5261293649673462,0.08982107043266296,0.845647931098938,0,-0.8313823342323303,-0.2634757459163666,-0.4892687201499939,0,0.17886100709438324,-0.9604753255844116,0.2132979929447174,0,1.5867183208465576,0.5534547567367554,-0.33220189809799194,1],[7,-0.2914985418319702,-0.032150253653526306,0.956031084060669,0,-0.9311684370040894,-0.2192593365907669,-0.29129138588905334,0,0.21898376941680908,-0.9751368165016174,0.033976517617702484,0,1.5764656066894531,0.5773159265518188,-0.6394287347793579,1],[7,-0.5214112401008606,-0.0321502611041069,0.8526998162269592,0,-0.828679621219635,-0.2192593216896057,-0.514990508556366,0,0.20351938903331757,-0.9751366376876831,0.08768205344676971,0,1.6311850547790527,0.5773159265518188,-0.23893189430236816,1],[7,-0.7181607484817505,-0.0321502611041069,0.6951343417167664,0,-0.6734845042228699,-0.21925930678844452,-0.7059346437454224,0,0.1751106083393097,-0.9751366972923279,0.1358107328414917,0,1.575501799583435,0.5773158669471741,0.16033077239990234,1],[7,-0.42356395721435547,-0.142218217253685,0.8946326375007629,0,-0.8965204954147339,-0.07568299770355225,-0.4364890456199646,0,0.12978509068489075,-0.9869377613067627,-0.0954449474811554,0,1.6858915090560913,0.44032081961631775,-0.346687376499176,1],[7,-0.681889533996582,-0.1422182321548462,0.7174962162971497,0,-0.7152509689331055,-0.07568300515413284,-0.6947574019432068,0,0.1531093269586563,-0.9869377613067627,-0.05011429637670517,0,1.6630570888519287,0.44032084941864014,0.1820579171180725,1],[7,-0.785188615322113,-0.142218217253685,0.602704644203186,0,-0.5984853506088257,-0.07568299770355225,-0.7975506782531738,0,0.1590406447649002,-0.9869377613067627,-0.02569011226296425,0,1.5608723163604736,0.44032081961631775,0.43006646633148193,1],[7,-0.28253182768821716,-0.21087124943733215,0.9357934594154358,0,-0.9369363784790039,-0.14856134355068207,-0.3163537383079529,0,0.2057325839996338,-0.9661588668823242,-0.15559956431388855,0,1.5727102756500244,0.5608391761779785,-0.535053014755249,1],[7,-0.4912514388561249,-0.21087126433849335,0.8451069593429565,0,-0.8383984565734863,-0.14856134355068207,-0.5244210362434387,0,0.23613545298576355,-0.9661588668823242,-0.10381311923265457,0,1.616047739982605,0.5608391165733337,-0.16588270664215088,1],[7,-0.673346221446991,-0.21087124943733215,0.7086173295974731,0,-0.694421112537384,-0.14856132864952087,-0.7040657997131348,0,0.2537402808666229,-0.9661588668823242,-0.046400200575590134,0,1.5728507041931152,0.5608391165733337,0.20330405235290527,1],[7,-0.9822540283203125,0.18755580484867096,0.0000013606623952000518,0,-0.18720030784606934,-0.9803928136825562,0.06153041869401932,0,0.011541719548404217,0.06043824553489685,0.9981052875518799,0,0.24119478464126587,2.471292495727539,-0.08715688437223434,1],[7,-0.5773321986198425,0.809962272644043,0.10319347679615021,0,-0.8104955554008484,-0.5837955474853516,0.04774776101112366,0,0.09891778230667114,-0.05607152730226517,0.9935146570205688,0,1.6904339790344238,1.8049393892288208,-0.003924310207366943,1],[7,-0.5315359234809875,0.809962272644043,0.24785253405570984,0,-0.7711201310157776,-0.583795428276062,0.25407981872558594,0,0.3504903018474579,-0.056071557104587555,0.9348864555358887,0,1.138293743133545,1.8049391508102417,-0.3061979413032532,1],[7,-0.2205219268798828,-0.04189269244670868,-0.9744821190834045,0,-0.9459825158119202,0.25262993574142456,0.20321203768253326,0,0.23767022788524628,0.9666556715965271,-0.09534011781215668,0,1.2930898666381836,-0.6075431108474731,-1.3249388933181763,1],[7,0.34657254815101624,0.93043053150177,-0.11910754442214966,0,-0.8218238353729248,0.36239659786224365,0.4396296739578247,0,0.4522090256214142,-0.0544782355427742,0.890246570110321,0,1.5266602039337158,0.353807270526886,-1.0623615980148315,1],[7,0.36472105979919434,0.93043053150177,-0.03574470058083534,0,-0.90120530128479,0.36239659786224365,0.23769252002239227,0,0.23411017656326294,-0.0544782355427742,0.9706825017929077,0,1.6621053218841553,0.353807270526886,-0.6969326138496399,1],[7,0.3662959933280945,0.93043053150177,0.011241436004638672,0,-0.9242193698883057,0.36239659786224365,0.12036330997943878,0,0.10791588574647903,-0.0544782429933548,0.9926662445068359,0,1.667490839958191,0.353807270526886,-0.48746973276138306,1],[7,0.08940549939870834,0.0898236632347107,-0.9919369220733643,0,-0.9626129865646362,0.26347577571868896,-0.06290376931428909,0,0.2557010054588318,0.9604751467704773,0.11002165824174881,0,1.3917921781539917,-0.5534548163414001,-1.0251200199127197,1],[7,0.31634020805358887,0.08982367068529129,-0.944383978843689,0,-0.9219824075698853,0.26347577571868896,-0.28377628326416016,0,0.22333240509033203,0.9604750871658325,0.1661638468503952,0,1.5298599004745483,-0.5534548163414001,-0.6900835037231445,1],[7,0.5261299014091492,0.08982367813587189,-0.845647394657135,0,-0.8313823938369751,0.26347577571868896,-0.48926877975463867,0,0.17885959148406982,0.9604750871658325,0.21330030262470245,0,1.5867183208465576,-0.5534548163414001,-0.33220183849334717,1],[7,0.2914991080760956,-0.03214762359857559,-0.9560309052467346,0,-0.9311684966087341,0.2192593663930893,-0.29129132628440857,0,0.218982994556427,0.9751369953155518,0.03397912159562111,0,1.5764654874801636,-0.5773160457611084,-0.6394286155700684,1],[7,0.5214117765426636,-0.032147619873285294,-0.8526996374130249,0,-0.8286797404289246,0.2192593663930893,-0.514990508556366,0,0.20351800322532654,0.975136935710907,0.08768437802791595,0,1.6311852931976318,-0.5773160457611084,-0.2389320731163025,1],[7,0.7181611657142639,-0.032147616147994995,-0.6951339244842529,0,-0.6734845042228699,0.2192593514919281,-0.7059346437454224,0,0.1751086711883545,0.9751368761062622,0.1358126550912857,0,1.5755016803741455,-0.5773159861564636,0.16033083200454712,1],[7,0.42356425523757935,-0.1422155499458313,-0.8946328163146973,0,-0.8965205550193787,0.07568300515413284,-0.4364890158176422,0,0.12978394329547882,0.9869382381439209,-0.0954425185918808,0,1.6858915090560913,-0.44032084941864014,-0.3466872572898865,1],[7,0.6818897724151611,-0.1422155350446701,-0.7174961566925049,0,-0.7152509093284607,0.07568301260471344,-0.6947572827339172,0,0.15310746431350708,0.9869381189346313,-0.05011233687400818,0,1.6630568504333496,-0.44032081961631775,0.1820581555366516,1],[7,0.7851889133453369,-0.1422155499458313,-0.6027045845985413,0,-0.5984854102134705,0.07568302005529404,-0.797550618648529,0,0.1590384989976883,0.9869381785392761,-0.025688474997878075,0,1.5608723163604736,-0.44032084941864014,0.43006670475006104,1],[7,0.28253236413002014,-0.21086862683296204,-0.9357938170433044,0,-0.9369363784790039,0.14856131374835968,-0.3163536787033081,0,0.2057318240404129,0.966159462928772,-0.1555970162153244,0,1.5727102756500244,-0.5608391165733337,-0.5350528955459595,1],[7,0.491252064704895,-0.21086862683296204,-0.8451071977615356,0,-0.8383985757827759,0.14856131374835968,-0.5244210362434387,0,0.2361341416835785,0.9661595225334167,-0.10381081700325012,0,1.6160478591918945,-0.5608391165733337,-0.16588258743286133,1],[7,0.6733468770980835,-0.21086861193180084,-0.7086173892021179,0,-0.694421112537384,0.14856131374835968,-0.7040657997131348,0,0.25373849272727966,0.966159462928772,-0.046398285776376724,0,1.5728504657745361,-0.560839056968689,0.20330429077148438,1],[7,1.945255371713084e-12,1,0.000001402693328600435,0,1,-6.131337435379483e-14,-0.0000013430886838250444,0,-0.0000013430887975118821,0.000001402693328600435,-1,0,-2.888314962387085,5.522846180383567e-8,-0.0108213871717453,1],[7,0.21810665726661682,-0.975469708442688,-0.029805749654769897,0,-0.9757510423660278,-0.2185426652431488,0.012210058979690075,0,-0.018424367532134056,0.026419896632432938,-0.999481201171875,0,1.3472318649291992,0.571790337562561,0.008673228323459625,1],[7,0.21658959984779358,-0.975469708442688,-0.03934269770979881,0,-0.9742766618728638,-0.2185426652431488,0.05499238520860672,0,-0.062241461127996445,0.026419896632432938,-0.9977114200592041,0,0.7258347272872925,0.571790337562561,-0.02318243309855461,1],[7,3.6823930571472374e-9,-0.9538619518280029,-0.3002457618713379,0,-1,-9.441852633074177e-9,-1.9633988657119517e-8,0,1.7617226788502194e-8,0.3002457618713379,-0.9538620114326477,0,0.22829675674438477,0.5190403461456299,0.13012763857841492,1],[7,0.3002457618713379,-0.9538619518280029,4.537702480433836e-8,0,1.9633990433476356e-8,-5.315325068977472e-8,-1,0,0.9538620114326477,0.3002457618713379,4.493066363409071e-9,0,-0.4191267192363739,0.5190403461456299,0.003736634738743305,1],[7,-0.21810691058635712,-0.9754698276519775,0.029803011566400528,0,-0.9757510423660278,0.21854281425476074,0.012210052460432053,0,-0.018423769623041153,-0.02641722373664379,-0.9994813203811646,0,1.3472318649291992,-0.5717906951904297,0.008673237636685371,1],[7,-0.21658994257450104,-0.9754698276519775,0.03933997452259064,0,-0.974276602268219,0.21854281425476074,0.054992374032735825,0,-0.06224086508154869,-0.02641722559928894,-0.9977115392684937,0,0.7258345484733582,-0.5717906355857849,-0.023182418197393417,1],[7,-3.6822247473367042e-9,-0.9538627862930298,0.3002431392669678,0,-1.0000001192092896,9.441738058058036e-9,-1.963395312998273e-8,0,1.761723922300007e-8,-0.3002431392669678,-0.9538628458976746,0,0.22829678654670715,-0.519040584564209,0.1301277130842209,1],[7,-0.3002431392669678,-0.9538627862930298,-4.537688980121857e-8,0,1.963395135362589e-8,5.3153129897509643e-8,-1.0000001192092896,0,0.9538628458976746,-0.3002431392669678,4.493189820209409e-9,0,-0.41912680864334106,-0.519040584564209,0.0037366352044045925,1]],8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8]]],0,0,[],[],[]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"texture":"951249e0-9f16-456d-8b85-a6ca954da16b@6c48a","packable":true}],[1],0,[0],[2],[34]],[[[6,"cocos_anim_attack",".bin",30,2,true,1.3333333730697632,3758508604,[[0,85280,41,6,41],[0,85444,41,6,41],[0,85608,41,6,41],[0,85772,41,6,41],[0,85936,41,6,41],[0,86100,41,6,41],[0,86264,41,6,41],[0,86428,41,6,41],[0,86592,41,6,41],[0,86756,41,6,41],[0,86920,41,6,41],[0,87084,41,6,41],[0,87248,41,6,41],[0,87412,41,6,41],[0,87576,41,6,41],[0,87740,41,6,41],[0,87904,41,6,41],[0,88068,41,6,41],[0,88232,41,6,41],[0,88396,41,6,41],[0,88560,41,6,41],[0,88724,41,6,41],[0,88888,41,6,41],[0,89052,41,6,41],[0,89216,41,6,41],[0,89380,41,6,41],[0,89544,41,6,41],[0,89708,41,6,41],[0,89872,41,6,41],[0,90036,41,6,41],[0,90200,41,6,41],[0,90364,41,6,41],[0,90528,41,6,41],[0,90692,41,6,41],[0,90856,41,6,41],[0,91020,41,6,41],[0,91184,41,6,41],[0,91348,41,6,41],[0,91512,41,6,41],[0,91676,41,6,41],[0,91840,41,6,41],[0,92004,41,6,41],[0,92168,41,6,41],[0,92332,41,6,41],[0,92496,41,6,41],[0,92660,41,6,41],[0,92824,41,6,41],[0,92988,41,6,41],[0,93152,41,6,41],[0,93316,41,6,41],[0,93480,41,6,41],[0,93644,41,6,41]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,123,22,41]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,492,164,38,41]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,1148,123,22,41]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,1640,123,22,41]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,2132,164,38,41]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,2788,123,22,41]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,3280,123,22,41]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,3772,164,38,41]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,4428,123,22,41]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,4920,123,22,41]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,5412,164,38,41]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,6068,123,22,41]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,6560,123,22,41]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,7052,164,38,41]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,7708,123,22,41]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,8200,123,22,41]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,8692,164,38,41]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,9348,123,22,41]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,9840,123,22,41]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,10332,164,38,41]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,10988,123,22,41]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,11480,123,22,41]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,11972,164,38,41]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,12628,123,22,41]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,13120,123,22,41]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,13612,164,38,41]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,14268,123,22,41]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,14760,123,22,41]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,15252,164,38,41]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,15908,123,22,41]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,16400,123,22,41]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,16892,164,38,41]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,17548,123,22,41]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,18040,123,22,41]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,18532,164,38,41]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,19188,123,22,41]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,19680,123,22,41]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,20172,164,38,41]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,20828,123,22,41]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,21320,123,22,41]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,21812,164,38,41]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,22468,123,22,41]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,22960,123,22,41]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,23452,164,38,41]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,24108,123,22,41]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,24600,123,22,41]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,25092,164,38,41]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,25748,123,22,41]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,26240,123,22,41]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,26732,164,38,41]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,27388,123,22,41]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,27880,123,22,41]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,28372,164,38,41]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,29028,123,22,41]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,29520,123,22,41]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,30012,164,38,41]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,30668,123,22,41]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,31160,123,22,41]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,31652,164,38,41]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,32308,123,22,41]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,32800,123,22,41]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,33292,164,38,41]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,33948,123,22,41]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,34440,123,22,41]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,34932,164,38,41]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,35588,123,22,41]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,36080,123,22,41]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,36572,164,38,41]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,37228,123,22,41]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,37720,123,22,41]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,38212,164,38,41]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,38868,123,22,41]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,39360,123,22,41]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,39852,164,38,41]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,40508,123,22,41]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,41000,123,22,41]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,41492,164,38,41]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,42148,123,22,41]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,42640,123,22,41]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,43132,164,38,41]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,43788,123,22,41]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,44280,123,22,41]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,44772,164,38,41]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,45428,123,22,41]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,45920,123,22,41]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,46412,164,38,41]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,47068,123,22,41]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,47560,123,22,41]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,48052,164,38,41]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,48708,123,22,41]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,49200,123,22,41]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,49692,164,38,41]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,50348,123,22,41]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,50840,123,22,41]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,51332,164,38,41]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,51988,123,22,41]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,52480,123,22,41]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,52972,164,38,41]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,53628,123,22,41]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,54120,123,22,41]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,54612,164,38,41]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,55268,123,22,41]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,55760,123,22,41]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,56252,164,38,41]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,56908,123,22,41]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,57400,123,22,41]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,57892,164,38,41]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,58548,123,22,41]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,59040,123,22,41]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,59532,164,38,41]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,60188,123,22,41]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,60680,123,22,41]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,61172,164,38,41]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,61828,123,22,41]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,62320,123,22,41]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,62812,164,38,41]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,63468,123,22,41]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,63960,123,22,41]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,64452,164,38,41]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,65108,123,22,41]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,65600,123,22,41]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,66092,164,38,41]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,66748,123,22,41]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,67240,123,22,41]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,67732,164,38,41]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,68388,123,22,41]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,68880,123,22,41]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,69372,164,38,41]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,70028,123,22,41]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,70520,123,22,41]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,71012,164,38,41]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,71668,123,22,41]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,72160,123,22,41]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,72652,164,38,41]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,73308,123,22,41]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,73800,123,22,41]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,74292,164,38,41]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,74948,123,22,41]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,75440,123,22,41]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,75932,164,38,41]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,76588,123,22,41]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,77080,123,22,41]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,77572,164,38,41]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,78228,123,22,41]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,78720,123,22,41]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,79212,164,38,41]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,79868,123,22,41]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,80360,123,22,41]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,80852,164,38,41]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,81508,123,22,41]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,82000,123,22,41]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,82492,164,38,41]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,83148,123,22,41]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,83640,123,22,41]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,84132,164,38,41]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,84788,123,22,41]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[[6,"cocos_anim_walk",".bin",30,2,true,1.0666667222976685,2717248691,[[0,68640,33,6,33],[0,68772,33,6,33],[0,68904,33,6,33],[0,69036,33,6,33],[0,69168,33,6,33],[0,69300,33,6,33],[0,69432,33,6,33],[0,69564,33,6,33],[0,69696,33,6,33],[0,69828,33,6,33],[0,69960,33,6,33],[0,70092,33,6,33],[0,70224,33,6,33],[0,70356,33,6,33],[0,70488,33,6,33],[0,70620,33,6,33],[0,70752,33,6,33],[0,70884,33,6,33],[0,71016,33,6,33],[0,71148,33,6,33],[0,71280,33,6,33],[0,71412,33,6,33],[0,71544,33,6,33],[0,71676,33,6,33],[0,71808,33,6,33],[0,71940,33,6,33],[0,72072,33,6,33],[0,72204,33,6,33],[0,72336,33,6,33],[0,72468,33,6,33],[0,72600,33,6,33],[0,72732,33,6,33],[0,72864,33,6,33],[0,72996,33,6,33],[0,73128,33,6,33],[0,73260,33,6,33],[0,73392,33,6,33],[0,73524,33,6,33],[0,73656,33,6,33],[0,73788,33,6,33],[0,73920,33,6,33],[0,74052,33,6,33],[0,74184,33,6,33],[0,74316,33,6,33],[0,74448,33,6,33],[0,74580,33,6,33],[0,74712,33,6,33],[0,74844,33,6,33],[0,74976,33,6,33],[0,75108,33,6,33],[0,75240,33,6,33],[0,75372,33,6,33]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,99,22,33]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,396,132,38,33]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,924,99,22,33]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,1320,99,22,33]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,1716,132,38,33]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,2244,99,22,33]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,2640,99,22,33]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,3036,132,38,33]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,3564,99,22,33]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,3960,99,22,33]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,4356,132,38,33]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,4884,99,22,33]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,5280,99,22,33]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,5676,132,38,33]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,6204,99,22,33]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,6600,99,22,33]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,6996,132,38,33]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,7524,99,22,33]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,7920,99,22,33]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,8316,132,38,33]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,8844,99,22,33]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,9240,99,22,33]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,9636,132,38,33]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,10164,99,22,33]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,10560,99,22,33]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,10956,132,38,33]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,11484,99,22,33]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,11880,99,22,33]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,12276,132,38,33]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,12804,99,22,33]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,13200,99,22,33]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,13596,132,38,33]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,14124,99,22,33]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,14520,99,22,33]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,14916,132,38,33]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,15444,99,22,33]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,15840,99,22,33]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,16236,132,38,33]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,16764,99,22,33]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,17160,99,22,33]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,17556,132,38,33]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,18084,99,22,33]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,18480,99,22,33]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,18876,132,38,33]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,19404,99,22,33]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,19800,99,22,33]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,20196,132,38,33]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,20724,99,22,33]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,21120,99,22,33]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,21516,132,38,33]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,22044,99,22,33]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,22440,99,22,33]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,22836,132,38,33]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,23364,99,22,33]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,23760,99,22,33]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,24156,132,38,33]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,24684,99,22,33]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,25080,99,22,33]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,25476,132,38,33]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,26004,99,22,33]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,26400,99,22,33]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,26796,132,38,33]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,27324,99,22,33]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,27720,99,22,33]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,28116,132,38,33]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,28644,99,22,33]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,29040,99,22,33]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,29436,132,38,33]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,29964,99,22,33]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,30360,99,22,33]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,30756,132,38,33]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,31284,99,22,33]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,31680,99,22,33]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,32076,132,38,33]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,32604,99,22,33]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,33000,99,22,33]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,33396,132,38,33]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,33924,99,22,33]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,34320,99,22,33]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,34716,132,38,33]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,35244,99,22,33]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,35640,99,22,33]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,36036,132,38,33]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,36564,99,22,33]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,36960,99,22,33]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,37356,132,38,33]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,37884,99,22,33]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,38280,99,22,33]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,38676,132,38,33]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,39204,99,22,33]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,39600,99,22,33]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,39996,132,38,33]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,40524,99,22,33]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,40920,99,22,33]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,41316,132,38,33]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,41844,99,22,33]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,42240,99,22,33]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,42636,132,38,33]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,43164,99,22,33]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,43560,99,22,33]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,43956,132,38,33]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,44484,99,22,33]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,44880,99,22,33]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,45276,132,38,33]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,45804,99,22,33]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,46200,99,22,33]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,46596,132,38,33]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,47124,99,22,33]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,47520,99,22,33]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,47916,132,38,33]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,48444,99,22,33]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,48840,99,22,33]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,49236,132,38,33]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,49764,99,22,33]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,50160,99,22,33]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,50556,132,38,33]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,51084,99,22,33]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,51480,99,22,33]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,51876,132,38,33]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,52404,99,22,33]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,52800,99,22,33]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,53196,132,38,33]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,53724,99,22,33]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,54120,99,22,33]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,54516,132,38,33]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,55044,99,22,33]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,55440,99,22,33]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,55836,132,38,33]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,56364,99,22,33]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,56760,99,22,33]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,57156,132,38,33]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,57684,99,22,33]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,58080,99,22,33]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,58476,132,38,33]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,59004,99,22,33]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,59400,99,22,33]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,59796,132,38,33]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,60324,99,22,33]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,60720,99,22,33]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,61116,132,38,33]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,61644,99,22,33]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,62040,99,22,33]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,62436,132,38,33]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,62964,99,22,33]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,63360,99,22,33]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,63756,132,38,33]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,64284,99,22,33]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,64680,99,22,33]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,65076,132,38,33]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,65604,99,22,33]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,66000,99,22,33]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,66396,132,38,33]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,66924,99,22,33]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,67320,99,22,33]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,67716,132,38,33]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,68244,99,22,33]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[[6,"cocos_anim_die",".bin",30,2,true,1.6666667461395264,1403947904,[[0,106080,51,6,51],[0,106284,51,6,51],[0,106488,51,6,51],[0,106692,51,6,51],[0,106896,51,6,51],[0,107100,51,6,51],[0,107304,51,6,51],[0,107508,51,6,51],[0,107712,51,6,51],[0,107916,51,6,51],[0,108120,51,6,51],[0,108324,51,6,51],[0,108528,51,6,51],[0,108732,51,6,51],[0,108936,51,6,51],[0,109140,51,6,51],[0,109344,51,6,51],[0,109548,51,6,51],[0,109752,51,6,51],[0,109956,51,6,51],[0,110160,51,6,51],[0,110364,51,6,51],[0,110568,51,6,51],[0,110772,51,6,51],[0,110976,51,6,51],[0,111180,51,6,51],[0,111384,51,6,51],[0,111588,51,6,51],[0,111792,51,6,51],[0,111996,51,6,51],[0,112200,51,6,51],[0,112404,51,6,51],[0,112608,51,6,51],[0,112812,51,6,51],[0,113016,51,6,51],[0,113220,51,6,51],[0,113424,51,6,51],[0,113628,51,6,51],[0,113832,51,6,51],[0,114036,51,6,51],[0,114240,51,6,51],[0,114444,51,6,51],[0,114648,51,6,51],[0,114852,51,6,51],[0,115056,51,6,51],[0,115260,51,6,51],[0,115464,51,6,51],[0,115668,51,6,51],[0,115872,51,6,51],[0,116076,51,6,51],[0,116280,51,6,51],[0,116484,51,6,51]],[[[{},"modifiers",12,[[-1,"position"],1,0],"data",11,[{"keys":0},"values",4,[7,153,22,51]]],[{},"modifiers",12,[[-2,"rotation"],1,0],"data",11,[{"keys":0},"values",4,[0,612,204,38,51]]],[{},"modifiers",12,[[-3,"scale"],1,0],"data",11,[{"keys":0},"values",4,[0,1428,153,22,51]]],[{},"modifiers",12,[[-4,"position"],1,0],"data",11,[{"keys":1},"values",4,[0,2040,153,22,51]]],[{},"modifiers",12,[[-5,"rotation"],1,0],"data",11,[{"keys":1},"values",4,[0,2652,204,38,51]]],[{},"modifiers",12,[[-6,"scale"],1,0],"data",11,[{"keys":1},"values",4,[0,3468,153,22,51]]],[{},"modifiers",12,[[-7,"position"],1,0],"data",11,[{"keys":2},"values",4,[0,4080,153,22,51]]],[{},"modifiers",12,[[-8,"rotation"],1,0],"data",11,[{"keys":2},"values",4,[0,4692,204,38,51]]],[{},"modifiers",12,[[-9,"scale"],1,0],"data",11,[{"keys":2},"values",4,[0,5508,153,22,51]]],[{},"modifiers",12,[[-10,"position"],1,0],"data",11,[{"keys":3},"values",4,[0,6120,153,22,51]]],[{},"modifiers",12,[[-11,"rotation"],1,0],"data",11,[{"keys":3},"values",4,[0,6732,204,38,51]]],[{},"modifiers",12,[[-12,"scale"],1,0],"data",11,[{"keys":3},"values",4,[0,7548,153,22,51]]],[{},"modifiers",12,[[-13,"position"],1,0],"data",11,[{"keys":4},"values",4,[0,8160,153,22,51]]],[{},"modifiers",12,[[-14,"rotation"],1,0],"data",11,[{"keys":4},"values",4,[0,8772,204,38,51]]],[{},"modifiers",12,[[-15,"scale"],1,0],"data",11,[{"keys":4},"values",4,[0,9588,153,22,51]]],[{},"modifiers",12,[[-16,"position"],1,0],"data",11,[{"keys":5},"values",4,[0,10200,153,22,51]]],[{},"modifiers",12,[[-17,"rotation"],1,0],"data",11,[{"keys":5},"values",4,[0,10812,204,38,51]]],[{},"modifiers",12,[[-18,"scale"],1,0],"data",11,[{"keys":5},"values",4,[0,11628,153,22,51]]],[{},"modifiers",12,[[-19,"position"],1,0],"data",11,[{"keys":6},"values",4,[0,12240,153,22,51]]],[{},"modifiers",12,[[-20,"rotation"],1,0],"data",11,[{"keys":6},"values",4,[0,12852,204,38,51]]],[{},"modifiers",12,[[-21,"scale"],1,0],"data",11,[{"keys":6},"values",4,[0,13668,153,22,51]]],[{},"modifiers",12,[[-22,"position"],1,0],"data",11,[{"keys":7},"values",4,[0,14280,153,22,51]]],[{},"modifiers",12,[[-23,"rotation"],1,0],"data",11,[{"keys":7},"values",4,[0,14892,204,38,51]]],[{},"modifiers",12,[[-24,"scale"],1,0],"data",11,[{"keys":7},"values",4,[0,15708,153,22,51]]],[{},"modifiers",12,[[-25,"position"],1,0],"data",11,[{"keys":8},"values",4,[0,16320,153,22,51]]],[{},"modifiers",12,[[-26,"rotation"],1,0],"data",11,[{"keys":8},"values",4,[0,16932,204,38,51]]],[{},"modifiers",12,[[-27,"scale"],1,0],"data",11,[{"keys":8},"values",4,[0,17748,153,22,51]]],[{},"modifiers",12,[[-28,"position"],1,0],"data",11,[{"keys":9},"values",4,[0,18360,153,22,51]]],[{},"modifiers",12,[[-29,"rotation"],1,0],"data",11,[{"keys":9},"values",4,[0,18972,204,38,51]]],[{},"modifiers",12,[[-30,"scale"],1,0],"data",11,[{"keys":9},"values",4,[0,19788,153,22,51]]],[{},"modifiers",12,[[-31,"position"],1,0],"data",11,[{"keys":10},"values",4,[0,20400,153,22,51]]],[{},"modifiers",12,[[-32,"rotation"],1,0],"data",11,[{"keys":10},"values",4,[0,21012,204,38,51]]],[{},"modifiers",12,[[-33,"scale"],1,0],"data",11,[{"keys":10},"values",4,[0,21828,153,22,51]]],[{},"modifiers",12,[[-34,"position"],1,0],"data",11,[{"keys":11},"values",4,[0,22440,153,22,51]]],[{},"modifiers",12,[[-35,"rotation"],1,0],"data",11,[{"keys":11},"values",4,[0,23052,204,38,51]]],[{},"modifiers",12,[[-36,"scale"],1,0],"data",11,[{"keys":11},"values",4,[0,23868,153,22,51]]],[{},"modifiers",12,[[-37,"position"],1,0],"data",11,[{"keys":12},"values",4,[0,24480,153,22,51]]],[{},"modifiers",12,[[-38,"rotation"],1,0],"data",11,[{"keys":12},"values",4,[0,25092,204,38,51]]],[{},"modifiers",12,[[-39,"scale"],1,0],"data",11,[{"keys":12},"values",4,[0,25908,153,22,51]]],[{},"modifiers",12,[[-40,"position"],1,0],"data",11,[{"keys":13},"values",4,[0,26520,153,22,51]]],[{},"modifiers",12,[[-41,"rotation"],1,0],"data",11,[{"keys":13},"values",4,[0,27132,204,38,51]]],[{},"modifiers",12,[[-42,"scale"],1,0],"data",11,[{"keys":13},"values",4,[0,27948,153,22,51]]],[{},"modifiers",12,[[-43,"position"],1,0],"data",11,[{"keys":14},"values",4,[0,28560,153,22,51]]],[{},"modifiers",12,[[-44,"rotation"],1,0],"data",11,[{"keys":14},"values",4,[0,29172,204,38,51]]],[{},"modifiers",12,[[-45,"scale"],1,0],"data",11,[{"keys":14},"values",4,[0,29988,153,22,51]]],[{},"modifiers",12,[[-46,"position"],1,0],"data",11,[{"keys":15},"values",4,[0,30600,153,22,51]]],[{},"modifiers",12,[[-47,"rotation"],1,0],"data",11,[{"keys":15},"values",4,[0,31212,204,38,51]]],[{},"modifiers",12,[[-48,"scale"],1,0],"data",11,[{"keys":15},"values",4,[0,32028,153,22,51]]],[{},"modifiers",12,[[-49,"position"],1,0],"data",11,[{"keys":16},"values",4,[0,32640,153,22,51]]],[{},"modifiers",12,[[-50,"rotation"],1,0],"data",11,[{"keys":16},"values",4,[0,33252,204,38,51]]],[{},"modifiers",12,[[-51,"scale"],1,0],"data",11,[{"keys":16},"values",4,[0,34068,153,22,51]]],[{},"modifiers",12,[[-52,"position"],1,0],"data",11,[{"keys":17},"values",4,[0,34680,153,22,51]]],[{},"modifiers",12,[[-53,"rotation"],1,0],"data",11,[{"keys":17},"values",4,[0,35292,204,38,51]]],[{},"modifiers",12,[[-54,"scale"],1,0],"data",11,[{"keys":17},"values",4,[0,36108,153,22,51]]],[{},"modifiers",12,[[-55,"position"],1,0],"data",11,[{"keys":18},"values",4,[0,36720,153,22,51]]],[{},"modifiers",12,[[-56,"rotation"],1,0],"data",11,[{"keys":18},"values",4,[0,37332,204,38,51]]],[{},"modifiers",12,[[-57,"scale"],1,0],"data",11,[{"keys":18},"values",4,[0,38148,153,22,51]]],[{},"modifiers",12,[[-58,"position"],1,0],"data",11,[{"keys":19},"values",4,[0,38760,153,22,51]]],[{},"modifiers",12,[[-59,"rotation"],1,0],"data",11,[{"keys":19},"values",4,[0,39372,204,38,51]]],[{},"modifiers",12,[[-60,"scale"],1,0],"data",11,[{"keys":19},"values",4,[0,40188,153,22,51]]],[{},"modifiers",12,[[-61,"position"],1,0],"data",11,[{"keys":20},"values",4,[0,40800,153,22,51]]],[{},"modifiers",12,[[-62,"rotation"],1,0],"data",11,[{"keys":20},"values",4,[0,41412,204,38,51]]],[{},"modifiers",12,[[-63,"scale"],1,0],"data",11,[{"keys":20},"values",4,[0,42228,153,22,51]]],[{},"modifiers",12,[[-64,"position"],1,0],"data",11,[{"keys":21},"values",4,[0,42840,153,22,51]]],[{},"modifiers",12,[[-65,"rotation"],1,0],"data",11,[{"keys":21},"values",4,[0,43452,204,38,51]]],[{},"modifiers",12,[[-66,"scale"],1,0],"data",11,[{"keys":21},"values",4,[0,44268,153,22,51]]],[{},"modifiers",12,[[-67,"position"],1,0],"data",11,[{"keys":22},"values",4,[0,44880,153,22,51]]],[{},"modifiers",12,[[-68,"rotation"],1,0],"data",11,[{"keys":22},"values",4,[0,45492,204,38,51]]],[{},"modifiers",12,[[-69,"scale"],1,0],"data",11,[{"keys":22},"values",4,[0,46308,153,22,51]]],[{},"modifiers",12,[[-70,"position"],1,0],"data",11,[{"keys":23},"values",4,[0,46920,153,22,51]]],[{},"modifiers",12,[[-71,"rotation"],1,0],"data",11,[{"keys":23},"values",4,[0,47532,204,38,51]]],[{},"modifiers",12,[[-72,"scale"],1,0],"data",11,[{"keys":23},"values",4,[0,48348,153,22,51]]],[{},"modifiers",12,[[-73,"position"],1,0],"data",11,[{"keys":24},"values",4,[0,48960,153,22,51]]],[{},"modifiers",12,[[-74,"rotation"],1,0],"data",11,[{"keys":24},"values",4,[0,49572,204,38,51]]],[{},"modifiers",12,[[-75,"scale"],1,0],"data",11,[{"keys":24},"values",4,[0,50388,153,22,51]]],[{},"modifiers",12,[[-76,"position"],1,0],"data",11,[{"keys":25},"values",4,[0,51000,153,22,51]]],[{},"modifiers",12,[[-77,"rotation"],1,0],"data",11,[{"keys":25},"values",4,[0,51612,204,38,51]]],[{},"modifiers",12,[[-78,"scale"],1,0],"data",11,[{"keys":25},"values",4,[0,52428,153,22,51]]],[{},"modifiers",12,[[-79,"position"],1,0],"data",11,[{"keys":26},"values",4,[0,53040,153,22,51]]],[{},"modifiers",12,[[-80,"rotation"],1,0],"data",11,[{"keys":26},"values",4,[0,53652,204,38,51]]],[{},"modifiers",12,[[-81,"scale"],1,0],"data",11,[{"keys":26},"values",4,[0,54468,153,22,51]]],[{},"modifiers",12,[[-82,"position"],1,0],"data",11,[{"keys":27},"values",4,[0,55080,153,22,51]]],[{},"modifiers",12,[[-83,"rotation"],1,0],"data",11,[{"keys":27},"values",4,[0,55692,204,38,51]]],[{},"modifiers",12,[[-84,"scale"],1,0],"data",11,[{"keys":27},"values",4,[0,56508,153,22,51]]],[{},"modifiers",12,[[-85,"position"],1,0],"data",11,[{"keys":28},"values",4,[0,57120,153,22,51]]],[{},"modifiers",12,[[-86,"rotation"],1,0],"data",11,[{"keys":28},"values",4,[0,57732,204,38,51]]],[{},"modifiers",12,[[-87,"scale"],1,0],"data",11,[{"keys":28},"values",4,[0,58548,153,22,51]]],[{},"modifiers",12,[[-88,"position"],1,0],"data",11,[{"keys":29},"values",4,[0,59160,153,22,51]]],[{},"modifiers",12,[[-89,"rotation"],1,0],"data",11,[{"keys":29},"values",4,[0,59772,204,38,51]]],[{},"modifiers",12,[[-90,"scale"],1,0],"data",11,[{"keys":29},"values",4,[0,60588,153,22,51]]],[{},"modifiers",12,[[-91,"position"],1,0],"data",11,[{"keys":30},"values",4,[0,61200,153,22,51]]],[{},"modifiers",12,[[-92,"rotation"],1,0],"data",11,[{"keys":30},"values",4,[0,61812,204,38,51]]],[{},"modifiers",12,[[-93,"scale"],1,0],"data",11,[{"keys":30},"values",4,[0,62628,153,22,51]]],[{},"modifiers",12,[[-94,"position"],1,0],"data",11,[{"keys":31},"values",4,[0,63240,153,22,51]]],[{},"modifiers",12,[[-95,"rotation"],1,0],"data",11,[{"keys":31},"values",4,[0,63852,204,38,51]]],[{},"modifiers",12,[[-96,"scale"],1,0],"data",11,[{"keys":31},"values",4,[0,64668,153,22,51]]],[{},"modifiers",12,[[-97,"position"],1,0],"data",11,[{"keys":32},"values",4,[0,65280,153,22,51]]],[{},"modifiers",12,[[-98,"rotation"],1,0],"data",11,[{"keys":32},"values",4,[0,65892,204,38,51]]],[{},"modifiers",12,[[-99,"scale"],1,0],"data",11,[{"keys":32},"values",4,[0,66708,153,22,51]]],[{},"modifiers",12,[[-100,"position"],1,0],"data",11,[{"keys":33},"values",4,[0,67320,153,22,51]]],[{},"modifiers",12,[[-101,"rotation"],1,0],"data",11,[{"keys":33},"values",4,[0,67932,204,38,51]]],[{},"modifiers",12,[[-102,"scale"],1,0],"data",11,[{"keys":33},"values",4,[0,68748,153,22,51]]],[{},"modifiers",12,[[-103,"position"],1,0],"data",11,[{"keys":34},"values",4,[0,69360,153,22,51]]],[{},"modifiers",12,[[-104,"rotation"],1,0],"data",11,[{"keys":34},"values",4,[0,69972,204,38,51]]],[{},"modifiers",12,[[-105,"scale"],1,0],"data",11,[{"keys":34},"values",4,[0,70788,153,22,51]]],[{},"modifiers",12,[[-106,"position"],1,0],"data",11,[{"keys":35},"values",4,[0,71400,153,22,51]]],[{},"modifiers",12,[[-107,"rotation"],1,0],"data",11,[{"keys":35},"values",4,[0,72012,204,38,51]]],[{},"modifiers",12,[[-108,"scale"],1,0],"data",11,[{"keys":35},"values",4,[0,72828,153,22,51]]],[{},"modifiers",12,[[-109,"position"],1,0],"data",11,[{"keys":36},"values",4,[0,73440,153,22,51]]],[{},"modifiers",12,[[-110,"rotation"],1,0],"data",11,[{"keys":36},"values",4,[0,74052,204,38,51]]],[{},"modifiers",12,[[-111,"scale"],1,0],"data",11,[{"keys":36},"values",4,[0,74868,153,22,51]]],[{},"modifiers",12,[[-112,"position"],1,0],"data",11,[{"keys":37},"values",4,[0,75480,153,22,51]]],[{},"modifiers",12,[[-113,"rotation"],1,0],"data",11,[{"keys":37},"values",4,[0,76092,204,38,51]]],[{},"modifiers",12,[[-114,"scale"],1,0],"data",11,[{"keys":37},"values",4,[0,76908,153,22,51]]],[{},"modifiers",12,[[-115,"position"],1,0],"data",11,[{"keys":38},"values",4,[0,77520,153,22,51]]],[{},"modifiers",12,[[-116,"rotation"],1,0],"data",11,[{"keys":38},"values",4,[0,78132,204,38,51]]],[{},"modifiers",12,[[-117,"scale"],1,0],"data",11,[{"keys":38},"values",4,[0,78948,153,22,51]]],[{},"modifiers",12,[[-118,"position"],1,0],"data",11,[{"keys":39},"values",4,[0,79560,153,22,51]]],[{},"modifiers",12,[[-119,"rotation"],1,0],"data",11,[{"keys":39},"values",4,[0,80172,204,38,51]]],[{},"modifiers",12,[[-120,"scale"],1,0],"data",11,[{"keys":39},"values",4,[0,80988,153,22,51]]],[{},"modifiers",12,[[-121,"position"],1,0],"data",11,[{"keys":40},"values",4,[0,81600,153,22,51]]],[{},"modifiers",12,[[-122,"rotation"],1,0],"data",11,[{"keys":40},"values",4,[0,82212,204,38,51]]],[{},"modifiers",12,[[-123,"scale"],1,0],"data",11,[{"keys":40},"values",4,[0,83028,153,22,51]]],[{},"modifiers",12,[[-124,"position"],1,0],"data",11,[{"keys":41},"values",4,[0,83640,153,22,51]]],[{},"modifiers",12,[[-125,"rotation"],1,0],"data",11,[{"keys":41},"values",4,[0,84252,204,38,51]]],[{},"modifiers",12,[[-126,"scale"],1,0],"data",11,[{"keys":41},"values",4,[0,85068,153,22,51]]],[{},"modifiers",12,[[-127,"position"],1,0],"data",11,[{"keys":42},"values",4,[0,85680,153,22,51]]],[{},"modifiers",12,[[-128,"rotation"],1,0],"data",11,[{"keys":42},"values",4,[0,86292,204,38,51]]],[{},"modifiers",12,[[-129,"scale"],1,0],"data",11,[{"keys":42},"values",4,[0,87108,153,22,51]]],[{},"modifiers",12,[[-130,"position"],1,0],"data",11,[{"keys":43},"values",4,[0,87720,153,22,51]]],[{},"modifiers",12,[[-131,"rotation"],1,0],"data",11,[{"keys":43},"values",4,[0,88332,204,38,51]]],[{},"modifiers",12,[[-132,"scale"],1,0],"data",11,[{"keys":43},"values",4,[0,89148,153,22,51]]],[{},"modifiers",12,[[-133,"position"],1,0],"data",11,[{"keys":44},"values",4,[0,89760,153,22,51]]],[{},"modifiers",12,[[-134,"rotation"],1,0],"data",11,[{"keys":44},"values",4,[0,90372,204,38,51]]],[{},"modifiers",12,[[-135,"scale"],1,0],"data",11,[{"keys":44},"values",4,[0,91188,153,22,51]]],[{},"modifiers",12,[[-136,"position"],1,0],"data",11,[{"keys":45},"values",4,[0,91800,153,22,51]]],[{},"modifiers",12,[[-137,"rotation"],1,0],"data",11,[{"keys":45},"values",4,[0,92412,204,38,51]]],[{},"modifiers",12,[[-138,"scale"],1,0],"data",11,[{"keys":45},"values",4,[0,93228,153,22,51]]],[{},"modifiers",12,[[-139,"position"],1,0],"data",11,[{"keys":46},"values",4,[0,93840,153,22,51]]],[{},"modifiers",12,[[-140,"rotation"],1,0],"data",11,[{"keys":46},"values",4,[0,94452,204,38,51]]],[{},"modifiers",12,[[-141,"scale"],1,0],"data",11,[{"keys":46},"values",4,[0,95268,153,22,51]]],[{},"modifiers",12,[[-142,"position"],1,0],"data",11,[{"keys":47},"values",4,[0,95880,153,22,51]]],[{},"modifiers",12,[[-143,"rotation"],1,0],"data",11,[{"keys":47},"values",4,[0,96492,204,38,51]]],[{},"modifiers",12,[[-144,"scale"],1,0],"data",11,[{"keys":47},"values",4,[0,97308,153,22,51]]],[{},"modifiers",12,[[-145,"position"],1,0],"data",11,[{"keys":48},"values",4,[0,97920,153,22,51]]],[{},"modifiers",12,[[-146,"rotation"],1,0],"data",11,[{"keys":48},"values",4,[0,98532,204,38,51]]],[{},"modifiers",12,[[-147,"scale"],1,0],"data",11,[{"keys":48},"values",4,[0,99348,153,22,51]]],[{},"modifiers",12,[[-148,"position"],1,0],"data",11,[{"keys":49},"values",4,[0,99960,153,22,51]]],[{},"modifiers",12,[[-149,"rotation"],1,0],"data",11,[{"keys":49},"values",4,[0,100572,204,38,51]]],[{},"modifiers",12,[[-150,"scale"],1,0],"data",11,[{"keys":49},"values",4,[0,101388,153,22,51]]],[{},"modifiers",12,[[-151,"position"],1,0],"data",11,[{"keys":50},"values",4,[0,102000,153,22,51]]],[{},"modifiers",12,[[-152,"rotation"],1,0],"data",11,[{"keys":50},"values",4,[0,102612,204,38,51]]],[{},"modifiers",12,[[-153,"scale"],1,0],"data",11,[{"keys":50},"values",4,[0,103428,153,22,51]]],[{},"modifiers",12,[[-154,"position"],1,0],"data",11,[{"keys":51},"values",4,[0,104040,153,22,51]]],[{},"modifiers",12,[[-155,"rotation"],1,0],"data",11,[{"keys":51},"values",4,[0,104652,204,38,51]]],[{},"modifiers",12,[[-156,"scale"],1,0],"data",11,[{"keys":51},"values",4,[0,105468,153,22,51]]]],11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11]],[1,"Bip002"],[1,"Bip002/Bip002 Pelvis"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger0/Bip002 L Finger01/Bip002 L Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger1/Bip002 L Finger11/Bip002 L Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger2/Bip002 L Finger21/Bip002 L Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger3/Bip002 L Finger31/Bip002 L Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 L Clavicle/Bip002 L UpperArm/Bip002 L Forearm/Bip002 L Hand/Bip002 L Finger4/Bip002 L Finger41/Bip002 L Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger0/Bip002 R Finger01/Bip002 R Finger02"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger1/Bip002 R Finger11/Bip002 R Finger12"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger2/Bip002 R Finger21/Bip002 R Finger22"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger3/Bip002 R Finger31/Bip002 R Finger32"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 R Clavicle/Bip002 R UpperArm/Bip002 R Forearm/Bip002 R Hand/Bip002 R Finger4/Bip002 R Finger41/Bip002 R Finger42"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 Spine1/Bip002 Neck/Bip002 Head"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 L Thigh/Bip002 L Calf/Bip002 L Foot/Bip002 L Toe0"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot"],[1,"Bip002/Bip002 Pelvis/Bip002 Spine/Bip002 R Thigh/Bip002 R Calf/Bip002 R Foot/Bip002 R Toe0"]],0,[0,-1,1,0,-1,1,0,-1,1,0,-1,2,0,-1,2,0,-1,2,0,-1,3,0,-1,3,0,-1,3,0,-1,4,0,-1,4,0,-1,4,0,-1,5,0,-1,5,0,-1,5,0,-1,6,0,-1,6,0,-1,6,0,-1,7,0,-1,7,0,-1,7,0,-1,8,0,-1,8,0,-1,8,0,-1,9,0,-1,9,0,-1,9,0,-1,10,0,-1,10,0,-1,10,0,-1,11,0,-1,11,0,-1,11,0,-1,12,0,-1,12,0,-1,12,0,-1,13,0,-1,13,0,-1,13,0,-1,14,0,-1,14,0,-1,14,0,-1,15,0,-1,15,0,-1,15,0,-1,16,0,-1,16,0,-1,16,0,-1,17,0,-1,17,0,-1,17,0,-1,18,0,-1,18,0,-1,18,0,-1,19,0,-1,19,0,-1,19,0,-1,20,0,-1,20,0,-1,20,0,-1,21,0,-1,21,0,-1,21,0,-1,22,0,-1,22,0,-1,22,0,-1,23,0,-1,23,0,-1,23,0,-1,24,0,-1,24,0,-1,24,0,-1,25,0,-1,25,0,-1,25,0,-1,26,0,-1,26,0,-1,26,0,-1,27,0,-1,27,0,-1,27,0,-1,28,0,-1,28,0,-1,28,0,-1,29,0,-1,29,0,-1,29,0,-1,30,0,-1,30,0,-1,30,0,-1,31,0,-1,31,0,-1,31,0,-1,32,0,-1,32,0,-1,32,0,-1,33,0,-1,33,0,-1,33,0,-1,34,0,-1,34,0,-1,34,0,-1,35,0,-1,35,0,-1,35,0,-1,36,0,-1,36,0,-1,36,0,-1,37,0,-1,37,0,-1,37,0,-1,38,0,-1,38,0,-1,38,0,-1,39,0,-1,39,0,-1,39,0,-1,40,0,-1,40,0,-1,40,0,-1,41,0,-1,41,0,-1,41,0,-1,42,0,-1,42,0,-1,42,0,-1,43,0,-1,43,0,-1,43,0,-1,44,0,-1,44,0,-1,44,0,-1,45,0,-1,45,0,-1,45,0,-1,46,0,-1,46,0,-1,46,0,-1,47,0,-1,47,0,-1,47,0,-1,48,0,-1,48,0,-1,48,0,-1,49,0,-1,49,0,-1,49,0,-1,50,0,-1,50,0,-1,50,0,-1,51,0,-1,51,0,-1,51,0,-1,52,0,-1,52,0,-1,52,156],[],[],[]],[[[25,[{}]]],0,0,[0],[4],[1]],[[[21,"Cube"],[40,"Cube",[[63,"Cube<MeshRenderer>",-2,[12,"2erEQtxdtBSo6YwRhlmlbt"],[0],[10],1]],[2,"81nUK45HxMyqFIxPtA6L1a",-1,0],[1,0,-1.5,0]]],0,[0,5,1,0,0,1,0,9,1,2],[0,0],[-1,3],[3,35]],[[[15,"oneStep",30,0.3,621535523,[[0,0.16666666666666666,0.3]],[[[{},"modifiers",12,[[[1,"/"],"position"],4,0],"data",11,[{"keys":0,"easingMethods":[null,null,null]},"values",12,[[[1,0,0,0],[1,0,0.5,0],[1,0,0,0]],8,8,8]]]],11]]],0,0,[],[],[]],[[[11,".bin",13416,4194113562,[{"primitives":[{"primitiveMode":7,"jointMapIndex":0,"vertexBundelIndices":[0],"indexView":{"offset":11592,"length":1824,"count":912,"stride":2}}],"vertexBundles":[{"view":{"offset":0,"length":11592,"count":161,"stride":72},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_joints","format":42,"isNormalized":false},{"name":"a_weights","format":44,"isNormalized":false}]}],"jointMaps":[[0,3]]},"minPosition",8,[1,-0.8866992592811584,2.8476545810699463,-0.8987371921539307],"maxPosition",8,[1,0.8866991400718689,4.560068130493164,0.8987413048744202]]]],0,0,[],[],[]]]]
